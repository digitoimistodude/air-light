# Pre commit hooks for Dude projects
# Ref: DEV-177

# Version:
VERSION="1.0.1 (2025-08-06)"

# Load configuration
. "$(dirname "$0")/pre-commit-config"

# Function to check if a file should be excluded
should_exclude_file() {
    file="$1"

    # Check directories to exclude
    case "|$EXCLUDE_DIRS|" in
        *"|${file%%/*}|"*) return 0 ;;
    esac

    # Check file patterns to exclude
    IFS='|'
    for pattern in $EXCLUDE_FILES; do
        case "$file" in
            $pattern) IFS=' '; return 0 ;;
        esac
    done
    IFS=' '

    # Check extensions to exclude
    case "|$EXCLUDE_EXTENSIONS|" in
        *"|${file##*.}|"*) return 0 ;;
    esac

    return 1  # don't exclude
}

# Function to get filtered staged files
get_filtered_staged_files() {
    all_files=$(git diff --cached --name-only)
    filtered_files=""

    for file in $all_files; do
        if ! should_exclude_file "$file"; then
            filtered_files="$filtered_files $file"
        fi
    done

    echo "$filtered_files"
}

# Colors for output
RED='\033[1;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'  # Bright blue for commands
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis for better visual feedback
CHECK="✅"
CROSS="❌"
ARROW="➜"
GEAR="⚙️"
PACKAGE="📦"
SEARCH="🔍"
CLEAN="🧹"

# ASCII art with colors
print_logo() {
  RESET='\033[0m'
  MINT='\033[38;2;0;128;128m'

  printf "${MINT}"
  printf "
███████████████   ██████     ██████ ███████████████    ████████████████
████████████████  ██████     ██████ █████████████████  ████████████████
██████   ████████ ██████     ██████ ███████   ████████ ████████
██████     ██████ ██████     ██████ ███████     ██████ ███████████████
██████    ███████ ████████  ███████ ███████   ████████ ████████
████████████████   ███████████████  █████████████████  ████████████████
██████████████       ████████████   ███████████████    ████████████████
"
  printf "${RESET}"
}

# Show the logo
print_logo

echo ""
echo "${MINT}Dude's husky quality control config DEV-177 v. ${VERSION}${NC}"
echo "${MINT}${GEAR}  Running pre-commit checks...${NC}"
echo ""

echo ""

# Check for required files
echo "${CYAN}${SEARCH} Checking required configuration files...${NC}"

printf "  ${ARROW} Checking for .nvmrc file... "
if [ ! -f ".nvmrc" ]; then
    echo "${RED}${CROSS} FAILED${NC}"
    echo "    ${RED}.nvmrc file is missing${NC}"
    echo "    ${YELLOW}Please create .nvmrc file with your Node.js version:${NC}"
    echo "    ${BLUE}node --version > .nvmrc${NC}"
    exit 1
fi
echo "${GREEN}${CHECK} OK${NC}"

printf "  ${ARROW} Checking for phpcs.xml file... "
if [ ! -f "phpcs.xml" ]; then
    echo "${RED}${CROSS} FAILED${NC}"
    echo "    ${RED}phpcs.xml file is missing${NC}"
    echo "    ${YELLOW}Please create phpcs.xml configuration file for PHP CodeSniffer${NC}"
    exit 1
fi
echo "${GREEN}${CHECK} OK${NC}"

printf "  ${ARROW} Checking for .github/workflows directory... "
if [ ! -d ".github/workflows" ]; then
    echo "${RED}${CROSS} FAILED${NC}"
    echo "    ${RED}.github/workflows directory is missing${NC}"
    echo "    ${YELLOW}Please create GitHub workflows directory:${NC}"
    echo "    ${BLUE}mkdir -p .github/workflows${NC}"
    echo "    ${YELLOW}And add your CI/CD workflow files${NC}"
    exit 1
fi
echo "${GREEN}${CHECK} OK${NC}"

printf "  ${ARROW} Checking for gulpfile.js... "
if [ ! -f "gulpfile.js" ]; then
    echo "${RED}${CROSS} FAILED${NC}"
    echo "    ${RED}gulpfile.js is missing from root directory${NC}"
    echo "    ${YELLOW}Please ensure Gulp is properly set up${NC}"
    exit 1
fi
echo "${GREEN}${CHECK} OK${NC}"

printf "  ${ARROW} Checking for gulp in package.json... "
if [ -f "package.json" ] && ! npm list gulp >/dev/null 2>&1; then
    echo "${RED}${CROSS} FAILED${NC}"
    echo "    ${RED}Gulp is not installed${NC}"
    echo "    ${YELLOW}Please install Gulp:${NC}"
    echo "    ${BLUE}nvm use${NC}"
    echo "    ${BLUE}npm install gulp --save-dev${NC}"
    exit 1
fi
echo "${GREEN}${CHECK} OK${NC}"

printf "  ${ARROW} Checking for root CHANGELOG.md... "
if [ ! -f "CHANGELOG.md" ]; then
    echo "${RED}${CROSS} FAILED${NC}"
    echo "    ${RED}CHANGELOG.md is missing from root directory${NC}"
    echo "    ${YELLOW}Please create CHANGELOG.md in root:${NC}"
    echo "    ${BLUE}touch CHANGELOG.md${NC}"
    exit 1
fi
echo "${GREEN}${CHECK} OK${NC}"

printf "  ${ARROW} Checking CHANGELOG.md format and freshness... "
# Check CHANGELOG.md format and date
if [ -f "CHANGELOG.md" ]; then
    first_line=$(head -n 1 CHANGELOG.md)

    # Check if first line matches format: ### x.x.x: yyyy-mm-dd (allows rc versions like x.x.xrc or x.x.x-rc)
    if echo "$first_line" | grep -qE "^### [0-9]+\.[0-9]+\.[0-9]+(-?rc)?[0-9]*: [0-9]{4}-[0-9]{2}-[0-9]{2}$"; then
        # Extract date from first line
        changelog_date=$(echo "$first_line" | sed 's/.*: //')

        # Get current date in yyyy-mm-dd format
        current_date=$(date +%Y-%m-%d)

        # Simple string comparison for dates (both should be in YYYY-MM-DD format)
        if [ "$changelog_date" != "$current_date" ]; then
            echo "${RED}${CROSS} FAILED${NC}"
            echo "    ${RED}CHANGELOG.md date must be today's date to keep it current${NC}"
            echo "    ${YELLOW}Changelog date: $changelog_date${NC}"
            echo "    ${YELLOW}Current date: $current_date${NC}"
            echo "    ${YELLOW}Please update the changelog with today's date and recent changes:${NC}"
            echo "    ${BLUE}nano CHANGELOG.md${NC}"
            exit 1
        else
            echo "${GREEN}${CHECK} OK${NC}"
        fi
    else
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${RED}CHANGELOG.md first line format is incorrect${NC}"
        echo "    ${YELLOW}Found: $first_line${NC}"
        echo "    ${YELLOW}Expected format: ### x.x.x: yyyy-mm-dd (or ### x.x.xrc: yyyy-mm-dd)${NC}"
        echo "    ${YELLOW}Example: ### 1.0.0: 2025-01-15 or ### 1.0.0rc: 2025-01-15${NC}"
        echo "    ${BLUE}nano CHANGELOG.md${NC}"
        exit 1
    fi
else
    echo "${YELLOW}⚠️  NOT FOUND${NC}"
fi

printf "  ${ARROW} Checking for CHANGELOG.md in themes (should not exist)... "
changelog_in_themes=""
for theme_dir in content/themes/*/; do
    if [ -f "${theme_dir}CHANGELOG.md" ]; then
        changelog_in_themes="$changelog_in_themes ${theme_dir}CHANGELOG.md"
    fi
done

if [ -n "$changelog_in_themes" ]; then
    echo "${RED}${CROSS} FAILED${NC}"
    echo "    ${RED}CHANGELOG.md found in theme directories (should only be in root):${NC}"
    for file in $changelog_in_themes; do
        echo "      ${YELLOW}• $file${NC}"
    done
    echo "    ${YELLOW}Please move changelog content to root CHANGELOG.md and remove:${NC}"
    echo "    ${BLUE}rm $changelog_in_themes${NC}"
    exit 1
fi
echo "${GREEN}${CHECK} OK${NC}"

# Check README.md first line for repo name
printf "  ${ARROW} Checking README.md first line... "
if [ -f "README.md" ]; then
    first_line=$(head -n 1 README.md)
    project_name=$(basename "$(pwd)")

    # Check if first line contains repo name (case sensitive)
    if echo "$first_line" | grep -q "$project_name"; then
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${RED}README.md first line contains repo name '$project_name'${NC}"
        echo "    ${YELLOW}Found: $first_line${NC}"
        echo "    ${YELLOW}Should contain a clear project name in sentence case${NC}"
        echo "    ${YELLOW}Example: # My Website Name${NC}"
        echo "    ${BLUE}nano README.md${NC}"
        exit 1
    fi
    echo "${GREEN}${CHECK} OK${NC}"
else
    echo "${YELLOW}⚠️  NOT FOUND${NC}"
fi

# Check theme style.css files
for theme_dir in content/themes/*/; do
    if [ -f "${theme_dir}style.css" ]; then
        theme_name=$(basename "$theme_dir")
        printf "  ${ARROW} Checking theme '${theme_name}' style.css... "

        # Check Theme Name line
        theme_name_line=$(grep "^Theme Name:" "${theme_dir}style.css" 2>/dev/null || echo "")
        if [ -n "$theme_name_line" ]; then
            # Check if theme name contains lowercase theme name
            if echo "$theme_name_line" | grep -qi "Theme Name:.*$theme_name"; then
                echo "${RED}${CROSS} FAILED${NC}"
                echo "    ${RED}Theme Name contains lowercase theme name '$theme_name'${NC}"
                echo "    ${YELLOW}Found: $theme_name_line${NC}"
                echo "    ${YELLOW}Should contain a clear theme name in sentence case${NC}"
                echo "    ${YELLOW}Example: Theme Name: My Website Theme${NC}"
                echo "    ${BLUE}nano ${theme_dir}style.css${NC}"
                exit 1
            fi
        fi

        # Check Description line
        description_line=$(grep "^Description:" "${theme_dir}style.css" 2>/dev/null || echo "")
        if [ -n "$description_line" ]; then
            # Check if description contains default starter theme text
            if echo "$description_line" | grep -qi "Description:.*Hi.*starter.*theme.*called"; then
                echo "${RED}${CROSS} FAILED${NC}"
                echo "    ${RED}Description contains default starter theme text${NC}"
                echo "    ${YELLOW}Found: $description_line${NC}"
                echo "    ${YELLOW}Should contain a meaningful description${NC}"
                echo "    ${YELLOW}Example: Description: Custom WordPress theme for My Website${NC}"
                echo "    ${BLUE}nano ${theme_dir}style.css${NC}"
                exit 1
            fi
        fi

        # Check Version against changelog
        version_line=$(grep "^Version:" "${theme_dir}style.css" 2>/dev/null || echo "")
        if [ -n "$version_line" ] && [ -f "CHANGELOG.md" ]; then
            style_version=$(echo "$version_line" | sed 's/Version: *//')
            changelog_version=$(head -n 1 CHANGELOG.md | sed 's/### *//' | sed 's/:.*$//')

            if [ "$style_version" != "$changelog_version" ]; then
                echo "${RED}${CROSS} FAILED${NC}"
                echo "    ${RED}Version mismatch between style.css and CHANGELOG.md${NC}"
                echo "    ${YELLOW}style.css version: $style_version${NC}"
                echo "    ${YELLOW}CHANGELOG.md version: $changelog_version${NC}"
                echo "    ${YELLOW}Please update version in style.css to match changelog${NC}"
                echo "    ${BLUE}nano ${theme_dir}style.css${NC}"
                exit 1
            fi
        fi

        echo "${GREEN}${CHECK} OK${NC}"
    fi
done


echo ""
# Check if dependencies are up to date
echo "${CYAN}${PACKAGE} Checking dependencies...${NC}"

# Check root package.json
if [ -f "package.json" ]; then
    printf "  ${ARROW} Checking root npm dependencies... "
    if [ ! -f "package-lock.json" ]; then
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${RED}package-lock.json file missing${NC}"
        echo "    ${YELLOW}Please run:${NC}"
        echo "    ${BLUE}nvm use${NC}"
        echo "    ${BLUE}npm install${NC}"
        exit 1
    fi
    if [ ! -d "node_modules" ]; then
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${RED}node_modules directory missing${NC}"
        echo "    ${YELLOW}Please run:${NC}"
        echo "    ${BLUE}nvm use${NC}"
        echo "    ${BLUE}npm install${NC}"
        exit 1
    fi
    echo "${GREEN}${CHECK} OK${NC}"
fi

# Check all themes with package.json
if [ -d "content/themes" ]; then
    for theme_dir in content/themes/*/; do
        if [ -f "${theme_dir}package.json" ]; then
            theme_name=$(basename "$theme_dir")
            printf "  ${ARROW} Checking theme '${theme_name}' dependencies... "
            if [ ! -f "${theme_dir}package-lock.json" ]; then
                echo "${RED}${CROSS} FAILED${NC}"
                echo "    ${RED}${theme_dir}package-lock.json file missing${NC}"
                echo "    ${YELLOW}Please run:${NC}"
                echo "    ${BLUE}cd ${theme_dir}${NC}"
                echo "    ${PURPLE}nvm use${NC}"
                echo "    ${PURPLE}npm install${NC}"
                exit 1
            fi
            if [ ! -d "${theme_dir}node_modules" ]; then
                echo "${RED}${CROSS} FAILED${NC}"
                echo "    ${RED}${theme_dir}node_modules directory missing${NC}"
                echo "    ${YELLOW}Please run:${NC}"
                echo "    ${BLUE}cd ${theme_dir}${NC}"
                echo "    ${PURPLE}nvm use${NC}"
                echo "    ${PURPLE}npm install${NC}"
                exit 1
            fi
            echo "${GREEN}${CHECK} OK${NC}"

            # Check for stylelint config in theme
            printf "  ${ARROW} Checking theme '${theme_name}' stylelint config... "
            if ! [ -f "${theme_dir}.stylelintrc" ] && ! [ -f "${theme_dir}.stylelintrc.json" ] && ! [ -f "${theme_dir}.stylelintrc.js" ] && ! [ -f "${theme_dir}.stylelintrc.yml" ]; then
                echo "${RED}${CROSS} FAILED${NC}"
                echo "    ${RED}No .stylelintrc file found in theme directory${NC}"
                echo "    ${YELLOW}Please create stylelint config in theme:${NC}"
                echo "    ${BLUE}cd ${theme_dir}${NC}"
                echo "    ${BLUE}touch .stylelintrc.json${NC}"
                echo "    ${YELLOW}If moving from root, update these paths:${NC}"
                echo "    ${YELLOW}- csstools/value-no-unknown-custom-properties importFrom${NC}"
                echo "    ${YELLOW}- .github/workflows/styles.yml working directory${NC}"
                exit 1
            fi
            echo "${GREEN}${CHECK} OK${NC}"
        fi
    done
fi

echo ""
echo "${CYAN}${SEARCH} Checking staged files for issues...${NC}"

# Get filtered staged files
staged_files=$(get_filtered_staged_files)

if [ -n "$staged_files" ]; then
    # Check for merge conflict markers
    printf "  ${ARROW} Checking for merge conflict markers... "
    conflict_files=""
    for file in $staged_files; do
        # Look for actual merge conflict markers at start of line, not in comments
        if git show :"$file" 2>/dev/null | grep -qE "^<<<<<<<\s|^=======\s*$|^>>>>>>>\s"; then
            conflict_files="$conflict_files $file"
        fi
    done

    if [ -n "$conflict_files" ]; then
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${RED}Merge conflict markers found in the following files:${NC}"
        for file in $conflict_files; do
            echo "      ${YELLOW}• $file${NC}"
            git show :"$file" | grep -nE "^<<<<<<<\s|^=======\s*$|^>>>>>>>\s" | head -3 | while read line; do
                echo "        ${PURPLE}$line${NC}"
            done
        done
        echo "    ${YELLOW}Please resolve conflicts and remove markers: ${NC}${PURPLE}<<<<<<< HEAD${NC}, ${PURPLE}=======${NC}, ${PURPLE}>>>>>>>${NC}"
        exit 1
    fi
    echo "${GREEN}${CHECK} OK${NC}"

    # Check for scissor marks in all staged files
    printf "  ${ARROW} Checking for scissor marks... "
    scissor_files=""
    for file in $staged_files; do
        if git show :"$file" 2>/dev/null | grep -q -- "------8<----------\|-8<-"; then
            scissor_files="$scissor_files $file"
        fi
    done

    if [ -n "$scissor_files" ]; then
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${RED}Found scissor marks in the following files:${NC}"
        for file in $scissor_files; do
            echo "      ${YELLOW}• $file${NC}"
            git show :"$file" | grep -n -- "------8<----------\|-8<-" | head -3 | while read line; do
                echo "        ${RED}$line${NC}"
            done
        done
        echo "    ${YELLOW}Please remove all scissor marks (------8<---------- or -8<-) before committing${NC}"
        exit 1
    fi
    echo "${GREEN}${CHECK} OK${NC}"
else
    echo "  ${YELLOW}No files to check${NC}"
fi

echo ""
echo "${CYAN}${CLEAN} Running code quality checks...${NC}"

# Check for PHP CodeSniffer errors
php_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' | tr '\n' ' ')
if [ -n "$php_files" ] && [ -f "phpcs.xml" ]; then
    printf "  ${ARROW} Running PHP CodeSniffer... "
    if ! ./vendor/bin/phpcs --standard=phpcs.xml --error-severity=1 --warning-severity=8 --colors $php_files; then
        echo ""
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${YELLOW}To fix automatically:${NC}"
        echo "    ${BLUE}./vendor/bin/phpcbf --standard=phpcs.xml $php_files${NC}"
        exit 1
    fi
    echo "${GREEN}${CHECK} OK${NC}"
fi

# Check SCSS files with stylelint (changed files only)
scss_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.scss$' | tr '\n' ' ')
if [ -n "$scss_files" ]; then
    printf "  ${ARROW} Running stylelint on changed SCSS files... "

    # Find stylelint config in theme directories
    stylelint_config=""
    for theme_dir in content/themes/*/; do
        if [ -f "${theme_dir}.stylelintrc" ]; then
            stylelint_config="${theme_dir}.stylelintrc"
            break
        elif [ -f "${theme_dir}.stylelintrc.json" ]; then
            stylelint_config="${theme_dir}.stylelintrc.json"
            break
        fi
    done

    if [ -n "$stylelint_config" ]; then
        if ! npx stylelint --config "$stylelint_config" $scss_files 2>/dev/null; then
            echo "${RED}${CROSS} FAILED${NC}"
            echo "    ${RED}Stylelint found errors in SCSS files${NC}"
            echo "    ${YELLOW}Please fix the following files:${NC}"
            for file in $scss_files; do
                echo "      ${YELLOW}• $file${NC}"
            done
            echo "    ${YELLOW}To see detailed errors:${NC}"
            echo "    ${BLUE}npx stylelint --config \"$stylelint_config\" $scss_files${NC}"
            exit 1
        fi
        echo "${GREEN}${CHECK} OK${NC}"
    else
        echo "${YELLOW}⚠️  SKIPPED${NC}"
        echo "    ${YELLOW}No .stylelintrc config found in theme directories${NC}"
    fi
else
    echo "  ${YELLOW}No SCSS files to check${NC}"
fi


# Check PHP 8.3 compatibility
if [ "$CHECK_CHANGED_ONLY" = "true" ]; then
    # Check only changed PHP files
    php_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' | tr '\n' ' ')
    if [ -n "$php_files" ]; then
        printf "  ${ARROW} Checking PHP 8.3 compatibility on changed files... "
        php_syntax_output=""
        php_syntax_exit_code=0

        for file in $php_files; do
            if [ -f "$file" ]; then
                file_output=$(php -l "$file" 2>&1)
                file_exit_code=$?
                if [ $file_exit_code -ne 0 ]; then
                    php_syntax_output="$php_syntax_output\n$file_output"
                    php_syntax_exit_code=1
                fi
            fi
        done

        if [ $php_syntax_exit_code -ne 0 ]; then
            echo "${RED}${CROSS} FAILED${NC}"
            echo "    ${PURPLE}PHP syntax errors found:${NC}"
            echo "$php_syntax_output" | while IFS= read -r line; do
                if [ -n "$line" ]; then
                    echo "    ${YELLOW}$line${NC}"
                fi
            done
            echo ""
            echo "    ${YELLOW}To check syntax manually:${NC}"
            echo "    ${BLUE}php -l [filename]${NC}"
            exit 1
        fi
        echo "${GREEN}${CHECK} OK${NC}"
    else
        echo "  ${YELLOW}No PHP files to check${NC}"
    fi
else
    # Check entire codebase (original behavior)
    printf "  ${ARROW} Checking PHP 8.3 compatibility on entire codebase... "
    php_syntax_output=$(find -L . -name '*.php' -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./src/*" -not -path "./js/*" -not -path "./css/*" -not -path "./sass/*" -not -path "./plugin-update-checker/*" -not -path "./content/themes/*" -not -path "./content/plugins/*" -not -path "./content/uploads/*" -not -path "./content/languages/*" -not -path "./content-mu-plugins/*" -not -path "./media/*" -not -path "./wp/*" -exec php -l {} \; 2>&1)
    php_syntax_exit_code=$?

    if [ $php_syntax_exit_code -ne 0 ]; then
        echo "${RED}${CROSS} FAILED${NC}"
        echo "    ${PURPLE}PHP syntax errors found:${NC}"

        if [ -n "$php_syntax_output" ]; then
            echo "$php_syntax_output" | while IFS= read -r line; do
                if [ -n "$line" ]; then
                    echo "    ${YELLOW}$line${NC}"
                fi
            done
        fi

        echo ""
        echo "    ${YELLOW}To check syntax manually:${NC}"
        echo "    ${BLUE}find -L . -name '*.php' -not -path \"./vendor/*\" -not -path \"./node_modules/*\" -not -path \"./src/*\" -not -path \"./js/*\" -not -path \"./css/*\" -not -path \"./sass/*\" -not -path \"./plugin-update-checker/*\" -not -path \"./content/themes/*\" -not -path \"./content/plugins/*\" -not -path \"./content/uploads/*\" -not -path \"./wp/*\" -exec php -l {} \\;${NC}"
        exit 1
    fi
    echo "${GREEN}${CHECK} OK${NC}"
fi

echo ""
echo "${CYAN}${SEARCH} Running comprehensive codebase checks...${NC}"


# Check GitHub Actions workflow syntax
printf "  ${ARROW} Checking GitHub Actions workflow syntax... "
workflow_files=""
if [ -d ".github/workflows" ]; then
    workflow_files=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null)
fi

if [ -n "$workflow_files" ]; then
    syntax_errors=""
    for workflow in $workflow_files; do
        # Basic YAML syntax check using python if available
        if command -v python3 >/dev/null 2>&1; then
            if ! python3 -c "import yaml; yaml.safe_load(open('$workflow'))" >/dev/null 2>&1; then
                syntax_errors="$syntax_errors $workflow"
            fi
        fi
    done

else
    echo "${YELLOW}⚠️  NOT FOUND${NC}"
    echo "    ${YELLOW}No GitHub Actions workflows found${NC}"
fi


# Check PHP files with PHPCS (using your workflow pattern)
if [ -f "phpcs.xml" ] && [ -f "./vendor/bin/phpcs" ]; then
    echo "  ${ARROW} Running PHP CodeSniffer on entire codebase..."
    # Use the same pattern as your GitHub Actions workflow
    if ./vendor/bin/phpcs -p . --extensions=php --ignore=vendor,content/themes,content/plugins,content/uploads,node_modules,src,js,css,sass,plugin-update-checker,wp,mu-plugins/air-blocks-acf-example-data,content/languages,scripts/Roots/Bedrock/Installer.php,index.php,content/mu-plugins --standard=phpcs.xml; then
        echo "    ${GREEN}${CHECK} OK${NC}"
    else
        echo "    ${RED}${CROSS} FAILED${NC}"
        echo ""
        echo "    ${YELLOW}To fix automatically:${NC}"
        echo "    ${BLUE}./vendor/bin/phpcbf -p . --extensions=php --ignore=vendor,content/themes,content/plugins,content/uploads,node_modules,src,js,css,sass,plugin-update-checker,wp,mu-plugins/air-blocks-acf-example-data,content/languages,scripts/Roots/Bedrock/Installer.php,index.php,content/mu-plugins --standard=phpcs.xml${NC}"
        exit 1
    fi
fi

# Note: Style checking is now handled by Gulp devstyles above

echo ""

echo ""
echo "${GREEN}${CHECK} All pre-commit checks passed!${NC}"
