{"mappings":"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","sources":["<anon>","js/src/front-end.js","node_modules/reframe.js/dist/reframe.es.js","js/src/modules/external-link.js","js/src/modules/localization.js","js/src/modules/anchors.js","node_modules/moveto/dist/moveTo.js","js/src/modules/top.js","js/src/modules/a11y-skip-link.js","js/src/modules/a11y-focus-search-field.js","js/src/modules/navigation.js","js/src/modules/navigation/add-multiple-event-listeners.js","js/src/modules/navigation/calculate-burger-menu-position.js","js/src/modules/navigation/a11y-focus-trap.js","js/src/modules/navigation/calculate-dropdown-toggle-height.js","js/src/modules/navigation/check-for-submenu-overflow.js","js/src/modules/navigation/is-out-of-viewport.js","js/src/modules/navigation/dropdown-menu-on-hover.js","js/src/modules/navigation/a11y-add-dropdown-toggle-labels.js","js/src/modules/navigation/a11y-dropdown-menu-keyboard-navigation.js","js/src/modules/navigation/convert-dropdown-menu-items.js","js/src/modules/navigation/close-sub-menu-handler.js","js/src/modules/navigation/close-sub-menu.js","js/src/modules/navigation/a11y-add-dropdown-toggle-labels-click.js","js/src/modules/navigation/a11y-dropdown-menu-keyboard-navigation-click.js"],"sourcesContent":["(function () {\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable max-len, no-param-reassign, no-unused-vars */ /**\n * Air theme JavaScript.\n */ // Import modules\n/**\n  reframe.js - Reframe.js: responsive iframes for embedded content\n  @version v4.0.2\n  @link https://github.com/yowainwright/reframe.ts#readme\n  @author Jeff Wainwright <yowainwright@gmail.com> (http://jeffry.in)\n  @license MIT\n**/ /**\n * REFRAME.TS 🖼\n * ---\n * @param target\n * @param cName\n * @summary defines the height/width ratio of the targeted <element>\n */ function $dc0908bd51a5de19$export$2e2bcd8739ae039(target, cName) {\n    var _a, _b;\n    var frames = typeof target === 'string' ? document.querySelectorAll(target) : target;\n    var c = cName || 'js-reframe';\n    if (!('length' in frames)) frames = [\n        frames\n    ];\n    for(var i = 0; i < frames.length; i += 1){\n        var frame = frames[i];\n        var hasClass = frame.className.split(' ').indexOf(c) !== -1;\n        if (hasClass || frame.style.width.indexOf('%') > -1) return;\n        // get height width attributes\n        var height = frame.getAttribute('height') || frame.offsetHeight;\n        var width = frame.getAttribute('width') || frame.offsetWidth;\n        var heightNumber = typeof height === 'string' ? parseInt(height) : height;\n        var widthNumber = typeof width === 'string' ? parseInt(width) : width;\n        // general targeted <element> sizes\n        var padding = heightNumber / widthNumber * 100;\n        // created element <wrapper> of general reframed item\n        // => set necessary styles of created element <wrapper>\n        var div = document.createElement('div');\n        div.className = c;\n        var divStyles = div.style;\n        divStyles.position = 'relative';\n        divStyles.width = '100%';\n        divStyles.paddingTop = \"\".concat(padding, \"%\");\n        // set necessary styles of targeted <element>\n        var frameStyle = frame.style;\n        frameStyle.position = 'absolute';\n        frameStyle.width = '100%';\n        frameStyle.height = '100%';\n        frameStyle.left = '0';\n        frameStyle.top = '0';\n        // reframe targeted <element>\n        (_a = frame.parentNode) === null || _a === void 0 || _a.insertBefore(div, frame);\n        (_b = frame.parentNode) === null || _b === void 0 || _b.removeChild(frame);\n        div.appendChild(frame);\n    }\n}\n\n\n/* eslint-disable no-param-reassign */ function $550bfe2de4deb792$export$2e2bcd8739ae039(stringKey) {\n    if (typeof window.air_light_screenReaderText === 'undefined' || typeof window.air_light_screenReaderText[stringKey] === 'undefined') {\n        // eslint-disable-next-line no-console\n        console.error(`Missing translation for ${stringKey}`);\n        return '';\n    }\n    return window.air_light_screenReaderText[stringKey];\n}\n\n\nfunction $99ac37db4027a3b8$var$isLinkExternal(link, localDomains) {\n    // Empty links are not external\n    if (!link.length) return false;\n    const exceptions = [\n        '#',\n        'tel:',\n        'mailto:',\n        '/'\n    ];\n    // Check if the url starts with some of the exceptions\n    const isException = exceptions.some((exception)=>{\n        const compare = new RegExp(`^${exception}`, 'g');\n        return compare.test(link);\n    });\n    if (isException) return false;\n    let linkUrl;\n    try {\n        linkUrl = new URL(link);\n    } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(`Invalid URL: ${link}`);\n        return false;\n    }\n    // Check if host is one of the local domains\n    return !localDomains.some((domain)=>linkUrl.host === domain);\n}\nfunction $99ac37db4027a3b8$export$967d794570dbbeff(link) {\n    const children = [\n        ...link.children\n    ];\n    if (children.length === 0) return '';\n    const childImgs = children.filter((child)=>child.tagName.toLowerCase() === 'img');\n    // If there are other elements than img elements, no need to add aria-label\n    if (children.length !== childImgs.length) return '';\n    // Find alt texts and add to array\n    const altTexts = childImgs.filter((child)=>child.alt && child.alt !== '').map((child)=>child.alt);\n    // If there is no alt texts,\n    if (!altTexts.length) return '';\n    return altTexts.join(', ');\n}\nfunction $99ac37db4027a3b8$export$554fdaa2aa89d7a4() {\n    let localDomains = [\n        window.location.host\n    ];\n    if (typeof window.air_light_externalLinkDomains !== 'undefined') localDomains = localDomains.concat(window.air_light_externalLinkDomains);\n    const links = document.querySelectorAll('a');\n    const externalLinks = [\n        ...links\n    ].filter((link)=>$99ac37db4027a3b8$var$isLinkExternal(link.href, localDomains));\n    // eslint-disable-next-line consistent-return\n    externalLinks.forEach((externalLink)=>{\n        // Abort mission if there is only img element inside of link\n        if (externalLink.childElementCount === 1 && externalLink.children[0].tagName.toLowerCase() === 'img') return false;\n        if (!externalLink.classList.contains('no-external-link-label')) {\n            const textContent = externalLink.textContent.trim().length ? externalLink.textContent.trim() : $99ac37db4027a3b8$export$967d794570dbbeff(externalLink);\n            if (textContent && !externalLink.getAttribute('aria-label')) {\n                const ariaLabel = externalLink.target === '_blank' ? `${textContent}: ${(0, $550bfe2de4deb792$export$2e2bcd8739ae039)('external_link')}, ${(0, $550bfe2de4deb792$export$2e2bcd8739ae039)('target_blank')}` : `${textContent}: ${(0, $550bfe2de4deb792$export$2e2bcd8739ae039)('external_link')}`;\n                externalLink.setAttribute('aria-label', ariaLabel);\n            }\n        }\n        // Arrow icon won't be added if one of these classes is defined for the link\n        const classExceptions = [\n            'no-external-link-indicator',\n            'global-link',\n            'button'\n        ];\n        if (!classExceptions.some((className)=>externalLink.classList.contains(className))) {\n            // Add SVG arrow icon\n            externalLink.insertAdjacentHTML('beforeend', '<svg class=\"external-link-icon\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 9 9\"><path d=\"M4.499 1.497h4v4m0-4l-7 7\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>');\n            externalLink.classList.add('is-external-link');\n        }\n    });\n}\nfunction $99ac37db4027a3b8$export$636763119f974537() {\n    // Add aria-labels to links without text or aria-labels and contain image with alt text\n    const links = [\n        ...document.querySelectorAll('a')\n    ];\n    // eslint-disable-next-line no-unused-vars\n    const linksWithImgChildren = links.forEach((link)=>{\n        // If link already has text content or an aria label no need to add aria-label\n        if (link.textContent.trim() !== '' || link.ariaLabel) return;\n        const ariaLabel = $99ac37db4027a3b8$export$967d794570dbbeff(link);\n        if (ariaLabel !== '') link.ariaLabel = ariaLabel;\n    });\n}\n\n\n/* eslint-disable no-param-reassign, no-undef */ var $eead75805f11b57e$exports = {};\n/*!\n * MoveTo - A lightweight scroll animation javascript library without any dependency.\n * Version 1.8.2 (28-06-2019 14:30)\n * Licensed under MIT\n * Copyright 2019 Hasan Aydoğdu <hsnaydd@gmail.com>\n */ \"use strict\";\nvar $eead75805f11b57e$var$MoveTo = function() {\n    /**\n   * Defaults\n   * @type {object}\n   */ var defaults = {\n        tolerance: 0,\n        duration: 800,\n        easing: 'easeOutQuart',\n        container: window,\n        callback: function callback() {}\n    };\n    /**\n   * easeOutQuart Easing Function\n   * @param  {number} t - current time\n   * @param  {number} b - start value\n   * @param  {number} c - change in value\n   * @param  {number} d - duration\n   * @return {number} - calculated value\n   */ function easeOutQuart(t, b, c, d) {\n        t /= d;\n        t--;\n        return -c * (t * t * t * t - 1) + b;\n    }\n    /**\n   * Merge two object\n   *\n   * @param  {object} obj1\n   * @param  {object} obj2\n   * @return {object} merged object\n   */ function mergeObject(obj1, obj2) {\n        var obj3 = {};\n        Object.keys(obj1).forEach(function(propertyName) {\n            obj3[propertyName] = obj1[propertyName];\n        });\n        Object.keys(obj2).forEach(function(propertyName) {\n            obj3[propertyName] = obj2[propertyName];\n        });\n        return obj3;\n    }\n    /**\n   * Converts camel case to kebab case\n   * @param  {string} val the value to be converted\n   * @return {string} the converted value\n   */ function kebabCase(val) {\n        return val.replace(/([A-Z])/g, function($1) {\n            return '-' + $1.toLowerCase();\n        });\n    }\n    /**\n   * Count a number of item scrolled top\n   * @param  {Window|HTMLElement} container\n   * @return {number}\n   */ function countScrollTop(container) {\n        if (container instanceof HTMLElement) return container.scrollTop;\n        return container.pageYOffset;\n    }\n    /**\n   * MoveTo Constructor\n   * @param {object} options Options\n   * @param {object} easeFunctions Custom ease functions\n   */ function MoveTo() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var easeFunctions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.options = mergeObject(defaults, options);\n        this.easeFunctions = mergeObject({\n            easeOutQuart: easeOutQuart\n        }, easeFunctions);\n    }\n    /**\n   * Register a dom element as trigger\n   * @param  {HTMLElement} dom Dom trigger element\n   * @param  {function} callback Callback function\n   * @return {function|void} unregister function\n   */ MoveTo.prototype.registerTrigger = function(dom, callback) {\n        var _this = this;\n        if (!dom) return;\n        var href = dom.getAttribute('href') || dom.getAttribute('data-target'); // The element to be scrolled\n        var target = href && href !== '#' ? document.getElementById(href.substring(1)) : document.body;\n        var options = mergeObject(this.options, _getOptionsFromTriggerDom(dom, this.options));\n        if (typeof callback === 'function') options.callback = callback;\n        var listener = function listener(e) {\n            e.preventDefault();\n            _this.move(target, options);\n        };\n        dom.addEventListener('click', listener, false);\n        return function() {\n            return dom.removeEventListener('click', listener, false);\n        };\n    };\n    /**\n   * Move\n   * Scrolls to given element by using easeOutQuart function\n   * @param  {HTMLElement|number} target Target element to be scrolled or target position\n   * @param  {object} options Custom options\n   */ MoveTo.prototype.move = function(target) {\n        var _this2 = this;\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        if (target !== 0 && !target) return;\n        options = mergeObject(this.options, options);\n        var distance = typeof target === 'number' ? target : target.getBoundingClientRect().top;\n        var from = countScrollTop(options.container);\n        var startTime = null;\n        var lastYOffset;\n        distance -= options.tolerance; // rAF loop\n        var loop = function loop(currentTime) {\n            var currentYOffset = countScrollTop(_this2.options.container);\n            if (!startTime) // To starts time from 1, we subtracted 1 from current time\n            // If time starts from 1 The first loop will not do anything,\n            // because easing value will be zero\n            startTime = currentTime - 1;\n            var timeElapsed = currentTime - startTime;\n            if (lastYOffset) {\n                if (distance > 0 && lastYOffset > currentYOffset || distance < 0 && lastYOffset < currentYOffset) return options.callback(target);\n            }\n            lastYOffset = currentYOffset;\n            var val = _this2.easeFunctions[options.easing](timeElapsed, from, distance, options.duration);\n            options.container.scroll(0, val);\n            if (timeElapsed < options.duration) window.requestAnimationFrame(loop);\n            else {\n                options.container.scroll(0, distance + from);\n                options.callback(target);\n            }\n        };\n        window.requestAnimationFrame(loop);\n    };\n    /**\n   * Adds custom ease function\n   * @param {string}   name Ease function name\n   * @param {function} fn   Ease function\n   */ MoveTo.prototype.addEaseFunction = function(name, fn) {\n        this.easeFunctions[name] = fn;\n    };\n    /**\n   * Returns options which created from trigger dom element\n   * @param  {HTMLElement} dom Trigger dom element\n   * @param  {object} options The instance's options\n   * @return {object} The options which created from trigger dom element\n   */ function _getOptionsFromTriggerDom(dom, options) {\n        var domOptions = {};\n        Object.keys(options).forEach(function(key) {\n            var value = dom.getAttribute(\"data-mt-\".concat(kebabCase(key)));\n            if (value) domOptions[key] = isNaN(value) ? value : parseInt(value, 10);\n        });\n        return domOptions;\n    }\n    return MoveTo;\n}();\n$eead75805f11b57e$exports = $eead75805f11b57e$var$MoveTo;\n\n\nconst $78fe155064334c3b$var$initAnchors = ()=>{\n    const easeFunctions = {\n        easeInQuad (t, b, c, d) {\n            t /= d;\n            return c * t * t + b;\n        },\n        easeOutQuad (t, b, c, d) {\n            t /= d;\n            return -c * t * (t - 2) + b;\n        }\n    };\n    const moveTo = new (0, (/*@__PURE__*/$parcel$interopDefault($eead75805f11b57e$exports)))({\n        ease: 'easeInQuad'\n    }, easeFunctions);\n    let triggers = document.querySelectorAll('a[href*=\"#\"]:not([href=\"#\"]):not(#top)');\n    triggers = Array.from(triggers);\n    triggers.forEach((trigger)=>{\n        moveTo.registerTrigger(trigger);\n        const targetId = trigger.hash.substring(1);\n        const target = document.getElementById(targetId);\n        trigger.addEventListener('click', (event)=>{\n            event.preventDefault(); // Prevent default behavior of anchor links\n            // If the trigger is nav-link, close nav\n            if (trigger.classList.contains('nav-link') || trigger.classList.contains('dropdown-item')) {\n                document.body.classList.remove('js-nav-active');\n                // Additional navigation cleanup\n                const html = document.documentElement;\n                const container = document.getElementById('main-navigation-wrapper');\n                const menu = container?.querySelector('ul');\n                const button = document.getElementById('nav-toggle');\n                if (html) html.classList.remove('disable-scroll');\n                if (container) container.classList.remove('is-active');\n                if (button) {\n                    button.classList.remove('is-active');\n                    button.setAttribute('aria-expanded', 'false');\n                }\n                if (menu) menu.setAttribute('aria-expanded', 'false');\n            }\n            // Check if the target element exists on the current page\n            if (target) {\n                // Scroll to the target element\n                moveTo.move(target);\n                // Update URL history\n                window.history.pushState('', '', trigger.hash);\n                // Focus on the target element after a delay\n                setTimeout(()=>{\n                    target.setAttribute('tabindex', '-1');\n                    target.focus();\n                }, 500);\n            } else // Navigate to the target page\n            window.location.href = trigger.href;\n        });\n    });\n};\nvar $78fe155064334c3b$export$2e2bcd8739ae039 = $78fe155064334c3b$var$initAnchors;\n\n\n/* eslint-disable max-len */ \nconst $c70d6dac4ed59eee$var$backToTop = ()=>{\n    // Back to top button\n    const moveToTop = new (0, (/*@__PURE__*/$parcel$interopDefault($eead75805f11b57e$exports)))({\n        duration: 300,\n        easing: 'easeOutQuart'\n    });\n    const topButton = document.getElementById('top');\n    const focusableElements = document.querySelectorAll('button, a, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n    function trackScroll() {\n        const scrolled = window.pageYOffset;\n        const scrollAmount = document.documentElement.clientHeight;\n        if (scrolled > scrollAmount) topButton.classList.add('is-visible');\n        if (scrolled < scrollAmount) topButton.classList.remove('is-visible');\n    }\n    function scroll(focusVisible) {\n        // Check if user prefers reduced motion, if so, just scroll to top\n        const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n        if (prefersReducedMotion) {\n            focusableElements[0].focus({\n                focusVisible: focusVisible\n            });\n            return;\n        }\n        // Move smoothly to the first focusable element on the page\n        moveToTop.move(focusableElements[0]);\n        // Focus too, if on keyboard\n        focusableElements[0].focus({\n            preventScroll: true,\n            focusVisible: focusVisible\n        });\n    }\n    if (topButton) {\n        topButton.addEventListener('click', (event)=>{\n            // Don't add hash in the end of the url\n            event.preventDefault();\n            // Focus without visibility (as user is not using keyboard)\n            scroll(false);\n        });\n        topButton.addEventListener('keydown', (event)=>{\n            // Don't propagate keydown event to click event\n            event.preventDefault();\n            // Scroll with focus visible\n            scroll(true);\n        });\n    }\n    window.addEventListener('scroll', trackScroll);\n};\nvar $c70d6dac4ed59eee$export$2e2bcd8739ae039 = $c70d6dac4ed59eee$var$backToTop;\n\n\n\nconst $adbf55b4d2ea0be3$var$initA11ySkipLink = ()=>{\n    // Go through all the headings of the page and select the first one\n    const a11ySkipLinkTarget = document.querySelectorAll('h1, h2, h3, h4, h5, h6')[0];\n    const a11ySkipLink = document.querySelectorAll('.skip-link')[0];\n    // Register trigger element\n    // eslint-disable-next-line no-unused-vars, no-restricted-globals\n    const moveTo = new (0, (/*@__PURE__*/$parcel$interopDefault($eead75805f11b57e$exports)))();\n    // When clicked, move focus to the target element\n    if (a11ySkipLink) a11ySkipLink.addEventListener('click', ()=>{\n        a11ySkipLinkTarget.setAttribute('tabindex', '-1');\n        a11ySkipLinkTarget.focus();\n        moveTo.move(a11ySkipLinkTarget);\n    });\n};\nvar $adbf55b4d2ea0be3$export$2e2bcd8739ae039 = $adbf55b4d2ea0be3$var$initA11ySkipLink;\n\n\nconst $a8e8a0c3e850e7dd$var$initA11yFocusSearchField = ()=>{\n    const urlSearch = window.location.search;\n    const urlParams = new URLSearchParams(urlSearch);\n    if (urlParams.has('s')) {\n        const searchField = document.querySelector('main input[name=\"s\"]');\n        if (searchField) searchField.focus({\n            preventScroll: true\n        });\n    }\n};\nvar $a8e8a0c3e850e7dd$export$2e2bcd8739ae039 = $a8e8a0c3e850e7dd$var$initA11yFocusSearchField;\n\n\n/**\n * Navigation.js module\n * The original, accessible navigation module for Air-light\n */ // Import functions needed for the navigation module\n// Event listener helper function\nfunction $e61912f31b7169e2$var$addMultipleEventListeners(element, events, handler) {\n    events.forEach((e)=>element.addEventListener(e, handler));\n}\nvar $e61912f31b7169e2$export$2e2bcd8739ae039 = $e61912f31b7169e2$var$addMultipleEventListeners;\n\n\n// Calculate burger menu position\nfunction $97724681587b67ff$var$calculateBurgerMenuPosition() {\n    // If nav-toggle, site-header or main-menu not found, bail\n    if (!document.getElementById('nav-toggle') || !document.querySelector('.site-header') || !document.getElementById('menu-items-wrapper')) {\n        // eslint-disable-next-line no-console\n        console.log('Warning: No nav-toggle or site-header found.');\n        return;\n    }\n    // Set viewport\n    const viewportWidth = document.documentElement.clientWidth || document.body.clientWidth;\n    // Get --width-max-mobile from CSS\n    const widthMaxMobile = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile'), 10);\n    // Get the height of .site-header and #nav-toggle\n    // Calculate the top position of the toggle to be exactly in the center vertically\n    const siteHeaderHeight = document.querySelector('.site-header').offsetHeight;\n    // Set navigation position from top if on mobile\n    if (viewportWidth <= widthMaxMobile) {\n        document.getElementById('menu-items-wrapper').style.top = `${siteHeaderHeight}px`;\n        document.getElementById('menu-items-wrapper').style.height = `calc(100vh - ${siteHeaderHeight}px)`;\n        // If there is air-notification element(s), calculate top and height of menu-items-wrapper\n        if (document.querySelector('.air-notification')) {\n            // Get air-notification element(s)\n            const airNotifications = document.querySelectorAll('.air-notification');\n            // Get the height of air-notification(s)\n            let airNotificationsHeight = 0;\n            airNotifications.forEach((airNotification)=>{\n                airNotificationsHeight = airNotification.offsetHeight + airNotificationsHeight;\n            });\n            // Set the height and top of menu-items-wrapper\n            document.getElementById('menu-items-wrapper').style.height = `calc(100vh - ${siteHeaderHeight + airNotificationsHeight}px)`;\n            document.getElementById('menu-items-wrapper').style.top = `${siteHeaderHeight + airNotificationsHeight}px`;\n            // When air-notification is closed, recalculate the height of menu-items-wrapper\n            airNotifications.forEach((airNotification)=>{\n                const button = airNotification.querySelector('button');\n                const currentNotificationHeight = airNotification.offsetHeight;\n                if (button) button.addEventListener('click', ()=>{\n                    airNotificationsHeight -= currentNotificationHeight;\n                    document.getElementById('menu-items-wrapper').style.height = `calc(100vh - ${siteHeaderHeight + airNotificationsHeight}px)`;\n                    document.getElementById('menu-items-wrapper').style.top = `${siteHeaderHeight + airNotificationsHeight}px`;\n                });\n            });\n        }\n    } else {\n        document.getElementById('menu-items-wrapper').style.top = '0';\n        document.getElementById('menu-items-wrapper').style.height = 'auto';\n    }\n}\nvar $97724681587b67ff$export$2e2bcd8739ae039 = $97724681587b67ff$var$calculateBurgerMenuPosition;\n\n\nfunction $8396852b9d810f79$var$a11yFocusTrap(e) {\n    // Init focusable elements\n    let focusableElements = [];\n    // Define container\n    const container = document.getElementById('nav');\n    // Define nav-toggle\n    const navToggle = document.getElementById('nav-toggle');\n    // Get --width-max-mobile from CSS\n    const widthMaxMobile = getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile');\n    // Let's see if we are on mobile viewport\n    const isMobile = window.matchMedia(`(max-width: ${widthMaxMobile})`).matches;\n    // If things are not okay, bail\n    if (!container || !navToggle || !isMobile) return;\n    // Set focusable elements inside main navigation.\n    focusableElements = [\n        ...container.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])')\n    ].filter((el)=>!el.hasAttribute('disabled')).filter((el)=>!!(el.offsetWidth || el.offsetHeight || el.getClientRects().length));\n    // Get first and last focusable element\n    const firstFocusableElement = focusableElements[0];\n    const lastFocusableElement = focusableElements[focusableElements.length - 1];\n    // On key down on first element, if it's a Shift+Tab, redirect to last element\n    if (firstFocusableElement === e.target && e.code === 'Tab' && e.shiftKey) {\n        e.preventDefault();\n        lastFocusableElement.focus();\n    }\n    // On key down on last element, if it's a Tab, redirect to first element\n    if (lastFocusableElement === e.target && e.code === 'Tab' && !e.shiftKey) {\n        e.preventDefault();\n        firstFocusableElement.focus();\n    }\n}\nvar $8396852b9d810f79$export$2e2bcd8739ae039 = $8396852b9d810f79$var$a11yFocusTrap;\n\n\n// Calculate mobile nav-toggle height\nfunction $8acd1c8dc1ad6dc5$var$calculateDropdownToggleHeight() {\n    // If .dropdown-toggle not found, bail\n    if (!document.querySelectorAll('.dropdown-toggle')) {\n        // eslint-disable-next-line no-console\n        console.log('Warning: No dropdown-toggles found.');\n        return;\n    }\n    // Find all .dropdown-toggle elements on mobile\n    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');\n    // Loop through dropdown toggles\n    dropdownToggles.forEach((dropdownToggle)=>{\n        // Get the height of previous element\n        const previousElement = dropdownToggle.previousElementSibling;\n        if (previousElement) {\n            const previousElementHeight = previousElement.offsetHeight;\n            // Set the height of the dropdown toggle\n            // eslint-disable-next-line no-param-reassign\n            dropdownToggle.style.height = `${previousElementHeight}px`;\n        }\n    });\n}\nvar $8acd1c8dc1ad6dc5$export$2e2bcd8739ae039 = $8acd1c8dc1ad6dc5$var$calculateDropdownToggleHeight;\n\n\n// Import required modules\n// Check if an element is out of the viewport\n// eslint-disable-next-line func-names\nconst $82ac21aceba2c5d7$var$isOutOfViewport = function(elem) {\n    // Get element's bounding\n    const bounding = elem.getBoundingClientRect();\n    // Check if it's out of the viewport on each side\n    const out = {};\n    out.top = bounding.top < 0;\n    out.left = bounding.left < 0;\n    out.bottom = bounding.bottom >= (document.documentElement.clientHeight || document.body.clientHeight);\n    out.right = bounding.right >= (document.documentElement.clientWidth || document.body.clientWidth);\n    out.any = out.top || out.left || out.bottom || out.right;\n    return out;\n};\nvar $82ac21aceba2c5d7$export$2e2bcd8739ae039 = $82ac21aceba2c5d7$var$isOutOfViewport;\n\n\n// Check for submenu overflow\nfunction $81a31256e9729810$var$checkForSubmenuOverflow(items) {\n    // If items not found, bail\n    if (!items) {\n        // eslint-disable-next-line no-console\n        console.log('Warning: No items for sub-menus found.');\n        return;\n    }\n    items.forEach((li)=>{\n        // Find sub menus\n        const subMenusUnderMenuItem = li.querySelectorAll('.sub-menu');\n        // Loop through sub menus\n        subMenusUnderMenuItem.forEach((subMenu)=>{\n            // First let's check if submenu exists\n            if (typeof subMenusUnderMenuItem !== 'undefined') {\n                // Check if the sub menu is out of viewport or not\n                const isOut = (0, $82ac21aceba2c5d7$export$2e2bcd8739ae039)(subMenu);\n                // At least one side of the element is out of viewport\n                if (isOut.right) subMenu.classList.add('is-out-of-viewport');\n            }\n        });\n    });\n}\nvar $81a31256e9729810$export$2e2bcd8739ae039 = $81a31256e9729810$var$checkForSubmenuOverflow;\n\n\n// Dropdown menu function\nfunction $de6955212554dcbb$var$dropdownMenuOnHover(items) {\n    // Optional timeout\n    const hoverIntentTimeout = 0;\n    items.forEach((li)=>{\n        // eslint-disable-next-line func-names\n        li.addEventListener('mouseover', function() {\n            // Get --width-max-mobile from CSS\n            const widthMaxMobile = getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile');\n            // Let's see if we are on mobile viewport\n            const isMobile = window.matchMedia(`(max-width: ${widthMaxMobile})`).matches;\n            // If rules don't apply, bail\n            if (li.classList.contains('removing-hover') || isMobile) return;\n            // Add hover classes\n            this.classList.add('hover-intent');\n            this.classList.add('hovering');\n            this.parentNode.classList.add('hover-intent');\n            this.parentNode.classList.add('hovering');\n            // Remove hovering class after a while\n            setTimeout(()=>{\n                this.classList.remove('hovering');\n                this.parentNode.classList.remove('hovering');\n            }, 500);\n            document.addEventListener('keydown', (keydownMouseoverEvent)=>{\n                // If rules don't apply, bail\n                if (this.classList.contains('removing-hover') || !this.classList.contains('hovering') || !this.parentNode.classList.contains('hovering')) return;\n                // Close navigation on Escape while hovering the navigation\n                if (keydownMouseoverEvent.key === 'Escape') {\n                    li.classList.remove('hover-intent');\n                    li.parentNode.classList.remove('hover-intent');\n                    li.parentNode.parentNode.classList.remove('hover-intent');\n                    // Add class removing-hover to prevent the menu from opening again when moving the mouse\n                    li.classList.add('removing-hover');\n                    li.parentNode.classList.add('removing-hover');\n                    // Remove removing-hover class after a while to re-initialize the menu\n                    setTimeout(()=>{\n                        this.classList.remove('removing-hover');\n                        this.parentNode.classList.remove('removing-hover');\n                    }, 500);\n                }\n            });\n            // Remove removing-hover class after a while to re-initialize the menu\n            setTimeout(()=>{\n                this.classList.remove('removing-hover');\n                this.parentNode.classList.remove('removing-hover');\n            }, 500);\n        });\n        // eslint-disable-next-line func-names\n        li.addEventListener('mouseleave', function() {\n            setTimeout(()=>{\n                // Remove hover-intent class on mouse leave\n                this.classList.remove('hover-intent');\n                this.parentNode.classList.remove('hover-intent');\n                const dropdownToggles = this.querySelectorAll('.dropdown-toggle');\n                dropdownToggles.forEach((dropdownToggle)=>{\n                    // Set aria-expanded to false for all dropdown-toggle elements\n                    dropdownToggle.setAttribute('aria-expanded', 'false');\n                    if (dropdownToggle.parentNode.querySelector('.dropdown')) {\n                        const linkText = dropdownToggle.parentNode.querySelector('.dropdown').textContent;\n                        // Set aria-label to expand for all dropdown-toggle elements\n                        // eslint-disable-next-line camelcase, no-undef\n                        dropdownToggle.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n                    }\n                });\n            }, hoverIntentTimeout);\n            setTimeout(()=>{\n                // Remove removing-hover class after a while to re-initialize the menu\n                this.classList.remove('removing-hover');\n                this.parentNode.classList.remove('removing-hover');\n            }, 500);\n        });\n    });\n}\nvar $de6955212554dcbb$export$2e2bcd8739ae039 = $de6955212554dcbb$var$dropdownMenuOnHover;\n\n\n// Add proper link labels for screen readers\nfunction $0a7c106768bacca4$var$a11yAddDropdownToggleLabels(items) {\n    items.forEach((li)=>{\n        // If .dropdown-class does not exist then do nothing\n        if (!li.querySelector('.dropdown')) return;\n        // Get the dropdown-button\n        const dropdownButton = li.querySelector('.dropdown-toggle');\n        // Get the link text that is children of this item\n        const linkText = li.querySelector('.dropdown').innerText;\n        // Add the aria-label to the dropdown button\n        // eslint-disable-next-line camelcase, no-undef\n        dropdownButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n    });\n}\nvar $0a7c106768bacca4$export$2e2bcd8739ae039 = $0a7c106768bacca4$var$a11yAddDropdownToggleLabels;\n\n\n// Import required modules\n\n// Accessible keyboard navigation for dropdown menus\nfunction $9783fac5bc95fd72$var$a11yDropdownMenuKeyboardNavigation(items, focusableElements) {\n    focusableElements.forEach((item)=>{\n        item.addEventListener('keyup', (e)=>{\n            // Get this item\n            const thisElement = e.target;\n            // Close previous dropdown if this parent contains id main-menu\n            if (thisElement.parentNode.parentNode.id === 'main-menu' || thisElement.classList.contains('button-nav') && thisElement.parentNode.parentNode.id === 'main-menu') // If we have previous item\n            {\n                if (thisElement.parentNode.previousElementSibling) {\n                    // Get the previous item\n                    const previousItem = thisElement.parentNode.previousElementSibling;\n                    // Remove toggled-on class from previous item\n                    previousItem.classList.remove('toggled-on');\n                    // Remove hover-intent class from previous item\n                    previousItem.classList.remove('hover-intent');\n                    // If sub-menu found\n                    if (previousItem.querySelector('.sub-menu')) {\n                        // Get the previous item's dropdown\n                        const previousItemDropdown = previousItem.querySelector('.sub-menu');\n                        // Remove toggled-on class from previous sibling\n                        previousItemDropdown.classList.remove('toggled-on');\n                        // Remove hover-intent class from previous sibling\n                        previousItemDropdown.classList.remove('hover-intent');\n                        // Change toggle button aria-label\n                        // eslint-disable-next-line camelcase, no-undef\n                        previousItem.querySelector('.dropdown-toggle').setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${previousItem.querySelector('.dropdown-item').innerText}`);\n                        // Change toggle button aria-expanded\n                        previousItem.querySelector('.dropdown-toggle').setAttribute('aria-expanded', 'false');\n                        // Toggle toggled-on class on previousItem\n                        previousItem.querySelector('.dropdown-toggle').classList.remove('toggled-on');\n                    }\n                }\n            }\n        });\n        // NVDA supported keyboard navigation (NVDA and mobile need click event to work)\n        (0, $e61912f31b7169e2$export$2e2bcd8739ae039)(item, [\n            'click',\n            'keydown',\n            'keypress'\n        ], (e)=>{\n            // Get this link\n            const thisElement = e.target;\n            // Get this menu-item\n            const thisMenuItem = thisElement.parentNode;\n            // Define the elements of this dropdown\n            const firstDropdown = thisElement.parentNode.parentNode.parentNode.querySelector('.sub-menu');\n            const thisDropdown = thisElement.nextElementSibling;\n            const dropdownToggleButton = thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle');\n            // Remove removing-hover class\n            thisElement.classList.remove('removing-hover');\n            thisMenuItem.parentNode.classList.remove('removing-hover');\n            // Open navigation on Enter, e.type click is for NVDA\n            if (e.key === 'Enter' || e.type === 'click') {\n                // If this item is a hyperlink, do nothing. We want to use Enter only with buttons\n                if (thisElement.tagName === 'A') return;\n                // If link label not found, do nothing\n                if (!thisElement.parentNode.querySelector('.dropdown-item')) return;\n                // Get the link label of .dropdown link\n                const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n                // Toggle toggled-on class\n                thisElement.classList.toggle('toggled-on');\n                // If aria-expanded is false, set it to true\n                if (thisElement.getAttribute('aria-expanded') === 'false') {\n                    // Set aria-expanded to true\n                    thisElement.setAttribute('aria-expanded', 'true');\n                    // Set aria-label of the dropdown button\n                    // eslint-disable-next-line camelcase, no-undef\n                    thisElement.setAttribute('aria-label', `${air_light_screenReaderText.collapse_for} ${linkLabel}`);\n                } else {\n                    // Set aria-expanded to false\n                    thisElement.setAttribute('aria-expanded', 'false');\n                    // Set aria-label of the dropdown button\n                    // eslint-disable-next-line camelcase, no-undef\n                    thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                }\n                // Toggle the dropdown\n                if (thisDropdown && !thisDropdown.classList.contains('toggled-on')) {\n                    // Add hover-intent class to this menu-item\n                    thisMenuItem.classList.add('hover-intent');\n                    // Add toggled-on class to this dropdown\n                    thisDropdown.classList.add('toggled-on');\n                } else {\n                    // Remove hover-intent class from this menu-item\n                    if (thisMenuItem) thisMenuItem.classList.remove('hover-intent');\n                    // Remove toggled-on class from this dropdown\n                    if (thisDropdown) thisDropdown.classList.remove('toggled-on');\n                }\n            }\n            // Close navigation on Escape\n            if (e.key === 'Escape') {\n                // Close mobile nav if no sub-menu is open\n                if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) {\n                    document.body.classList.remove('js-nav-active');\n                    // Move focus back to nav-toggle\n                    document.getElementById('nav-toggle').focus();\n                }\n                // If we're on main level and nav item is not open, do nothing\n                if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('hover-intent')) return;\n                // Remove toggled-on classes from this dropdown\n                firstDropdown.classList.remove('toggled-on');\n                // Remove hover-intent classes from the current menu-item\n                thisMenuItem.classList.remove('hover-intent');\n                // Hide menu if we're on second level\n                thisMenuItem.parentNode.parentNode.classList.remove('hover-intent');\n                // Set aria expanded attribute to false\n                dropdownToggleButton.setAttribute('aria-expanded', 'false');\n                // Remove toggled-on\n                dropdownToggleButton.classList.remove('toggled-on');\n                // Get the link label of dropdown link\n                const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n                // Set aria label attribute\n                // eslint-disable-next-line camelcase, no-undef\n                dropdownToggleButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                // If we're on button, add aria-expanded to false\n                if (thisElement.classList.contains('dropdown-toggle')) {\n                    thisElement.setAttribute('aria-expanded', 'false');\n                    // Set aria-label of the dropdown button\n                    // eslint-disable-next-line camelcase, no-undef\n                    thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                }\n                // Move focus back to previous .dropdown-toggle, but only if we're not on main level\n                if (thisElement.parentNode.parentNode.id !== 'main-menu') // Delay toggling for NVDA for 100 ms\n                setTimeout(()=>{\n                    dropdownToggleButton.focus();\n                }, 100);\n            }\n            // If no arrow keys used, do not continue\n            if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n            // Arrow keys\n            switch(e.code){\n                // ArrowUp\n                case 'ArrowUp':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If we're on the sub-menu, move up\n                    if (thisElement.parentNode.parentNode.previousElementSibling && thisElement.parentNode.parentNode.previousElementSibling.classList.contains('dropdown-toggle')) // Focus to the previous link\n                    thisElement.parentNode.parentNode.previousElementSibling.focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is true, close the dropdown\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n                        // Remove hover-intent class from this menu-item\n                        thisMenuItem.classList.remove('hover-intent');\n                        // Remove toggled-on class from this dropdown\n                        thisDropdown.classList.remove('toggled-on');\n                        // Set aria-expanded attribute to false\n                        thisElement.setAttribute('aria-expanded', 'false');\n                        // Get the link label of .dropdown link\n                        const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n                        // Set aria-label of the dropdown button\n                        // eslint-disable-next-line camelcase, no-undef\n                        thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                        // Move focus back to previous .dropdown-toggle\n                        dropdownToggleButton.focus();\n                    }\n                    // If this is a correct element, focus to the previous link\n                    if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n                        // If there is no previous items, bail\n                        if (!thisElement.parentNode.previousElementSibling) return;\n                        // Get the previous link\n                        const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        const previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle');\n                        // If previous element is .dropdown-toggle element, focus to it\n                        if (previousToggle && !thisElement.querySelector('.dropdown-toggle')) previousToggle.focus();\n                        else // If previous element is a link, focus to it\n                        previousLink.focus();\n                    }\n                    break;\n                // ArrowDown\n                case 'ArrowDown':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If we're on the sub-menu, move down\n                    if (thisElement.parentNode.parentNode.nextElementSibling && thisElement.parentNode.parentNode.nextElementSibling.classList.contains('dropdown-toggle')) // Focus to the next link\n                    thisElement.parentNode.parentNode.nextElementSibling.focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is true, move down\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') // Focus to the next link\n                    thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n                    // (if we are not inside sub-menu)\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && !thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n                        // Open sub-menu\n                        thisElement.click();\n                        // Focus to the next link under sub-menu\n                        thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                        // Don't do anything else\n                        return;\n                    }\n                    // If we are in fact in sub menu, move to next link\n                    if (thisElement.parentNode.parentNode.classList.contains('sub-menu')) // Focus to the next link\n                    thisElement.parentNode.nextElementSibling.querySelector('a').focus();\n                    // If this is a correct element, focus to the next link\n                    if ((thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') && !thisElement.classList.contains('dropdown-toggle')) {\n                        // If there is no next items, bail\n                        if (!thisElement.parentNode.nextElementSibling) return;\n                        // Get the next link\n                        const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        let nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle');\n                        // If this has class .dropdown-item, jump to the next .dropdown-toggle\n                        if (thisElement.classList.contains('dropdown-item')) // If there is a toggle\n                        {\n                            if (thisElement.nextElementSibling) {\n                                // Get the dropdown-toggle element\n                                nextToggle = thisElement.nextElementSibling;\n                                // If next element is .dropdown-toggle element, focus to it\n                                if (nextToggle) nextToggle.focus();\n                            }\n                        }\n                        // If next element is .dropdown-toggle element, focus to it\n                        if (nextToggle && !thisElement.querySelector('.dropdown-toggle')) nextToggle.focus();\n                        else // If next element is a link, focus to it\n                        nextLink.focus();\n                    }\n                    break;\n                // ArrowLeft\n                case 'ArrowLeft':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If we are on the first link, move to the dropdown-toggle and close menu\n                    if (thisElement.parentNode.previousElementSibling === null && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Focus to the previous link\n                        thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').focus();\n                        // Close the dropdown\n                        thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').click();\n                        // Don't do anything else\n                        return;\n                    }\n                    // If this is a .dropdown-toggle button and aria-expanded is true, move left\n                    if (thisElement.parentNode.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') // Focus to the previous link\n                    thisElement.parentNode.previousElementSibling.querySelector('a').focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is false, close the dropdown\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Remove hover-intent class from this menu-item\n                        thisMenuItem.classList.remove('hover-intent');\n                        // Remove toggled-on class from this dropdown\n                        thisDropdown.classList.remove('toggled-on');\n                        // Set aria-expanded attribute to false\n                        thisElement.setAttribute('aria-expanded', 'false');\n                        // Get the link label of .dropdown link\n                        const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n                        // Set aria-label of the dropdown button\n                        // eslint-disable-next-line camelcase, no-undef\n                        thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                        // Move focus back to previous .dropdown-toggle\n                        dropdownToggleButton.focus();\n                    }\n                    // If this is a correct element, focus to the previous link\n                    if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n                        // If this is a .dropdown-toggle button and aria-expanded is false,\n                        // move to the link directly before it\n                        if (thisElement.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false') {\n                            // Focus to the previous link\n                            thisElement.previousElementSibling.focus();\n                            // Don't do anything else\n                            return;\n                        }\n                        // If there is no previous items, bail\n                        if (!thisElement.parentNode.previousElementSibling) return;\n                        // Get the previous link\n                        const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        const previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle');\n                        // If previous element is .dropdown-toggle element, focus to it\n                        if (previousToggle) previousToggle.focus();\n                        else // If previous element is a link, focus to it\n                        previousLink.focus();\n                    }\n                    break;\n                // ArrowRight\n                case 'ArrowRight':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If this is a .dropdown-toggle button and aria-expanded is true, move right\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') // Focus to the next link\n                    thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                    // If this has class .dropdown-item, jump to the next .dropdown-toggle\n                    if (thisElement.nextElementSibling) {\n                        thisElement.nextElementSibling.focus();\n                        // Disable other actions if this is a .dropdown-item\n                        if (thisElement.classList.contains('dropdown-item')) return;\n                    }\n                    // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Open sub-menu\n                        thisElement.click();\n                        // Do nothing else\n                        return;\n                    }\n                    // If this is a dropdown-toggle button and aria-expanded is true, move right\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Focus to the next link\n                        thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                        // Don't do anything else\n                        return;\n                    }\n                    // If this is a correct element, focus to the previous link\n                    if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n                        // If there is no next items, bail\n                        if (!thisElement.parentNode.nextElementSibling) return;\n                        // Get the next link\n                        const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        const nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle');\n                        // If next element is .dropdown-toggle element, focus to it\n                        if (nextToggle) nextToggle.focus();\n                        else // If next element is a link, focus to it\n                        nextLink.focus();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n    });\n}\nvar $9783fac5bc95fd72$export$2e2bcd8739ae039 = $9783fac5bc95fd72$var$a11yDropdownMenuKeyboardNavigation;\n\n\nfunction $0fb4353588d70701$var$convertDropdownMenuItems(items) {\n    items.forEach((li)=>{\n        // Get dropdown toggle button\n        const dropdownToggle = li.querySelector('.dropdown-toggle');\n        // Get dropdown menu item data\n        const menuItemTitle = li.querySelector('a > span').innerHTML;\n        const menuItemLinkElement = li.querySelector('a');\n        const menuItemLink = menuItemLinkElement.href;\n        // Remove dropdown menu item link\n        menuItemLinkElement.remove();\n        // Add dropdown menu item title to dropdown toggle button\n        dropdownToggle.innerHTML = menuItemTitle;\n        // Create new nav element\n        const navElement = document.createElement('li');\n        navElement.classList.add('menu-item');\n        // Add dropdown menu item data to nav element\n        // Create elements\n        const navElementLink = document.createElement('a');\n        const navElementLinkSpan = document.createElement('span');\n        // Add data to elements\n        // Span\n        navElementLinkSpan.innerHTML = menuItemTitle;\n        navElementLinkSpan.setAttribute('itemprop', 'name');\n        // Link\n        navElementLink.setAttribute('itemprop', 'url');\n        navElementLink.href = menuItemLink;\n        navElementLink.classList.add('dropdown-item');\n        // Append elements\n        navElementLink.appendChild(navElementLinkSpan);\n        navElement.appendChild(navElementLink);\n        // Get the sub menu first child and add the new nav element before it\n        const subMenuFirstChild = li.querySelector('.sub-menu > li');\n        const subMenu = li.querySelector('.sub-menu');\n        subMenu.insertBefore(navElement, subMenuFirstChild);\n    });\n}\nvar $0fb4353588d70701$export$2e2bcd8739ae039 = $0fb4353588d70701$var$convertDropdownMenuItems;\n\n\nfunction $0ae57bdd7001c75f$var$closeSubMenu(li) {\n    // If menu item is not a dropdown then do nothing\n    if (!li.querySelector('.dropdown-toggle') && !li.querySelector('.sub-menu')) return;\n    // Get the dropdown-button\n    const dropdownButton = li.querySelector('.dropdown-toggle');\n    // Get the submenu\n    const subMenu = li.querySelector('.sub-menu');\n    // If the dropdown-menu is not open, bail\n    if (!subMenu.classList.contains('toggled-on')) return;\n    // Remove the open class from the dropdown-menu\n    subMenu.classList.remove('toggled-on');\n    // Remove the open class from the dropdown-button\n    dropdownButton.classList.remove('toggled-on');\n    // Remove the aria-expanded attribute from the dropdown-button\n    dropdownButton.setAttribute('aria-expanded', 'false');\n    // Get the link text that is children of this item\n    const linkText = dropdownButton.innerHTML;\n    // Add the aria-label to the dropdown button\n    // eslint-disable-next-line camelcase, no-undef\n    dropdownButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n}\nvar $0ae57bdd7001c75f$export$2e2bcd8739ae039 = $0ae57bdd7001c75f$var$closeSubMenu;\n\n\nfunction $842dcce66d222c17$var$closeSubMenuHandler(items) {\n    // Close open dropdowns when clicking outside of the menu\n    const page = document.getElementById('page');\n    page.addEventListener('click', (e)=>{\n        // If the click is inside the menu, bail\n        if (e.target.closest('.menu-items')) return;\n        items.forEach((li)=>{\n            (0, $0ae57bdd7001c75f$export$2e2bcd8739ae039)(li);\n        });\n    });\n    // Close open dropdown when pressing escape\n    items.forEach((li)=>{\n        li.addEventListener('keydown', (keydownMouseoverEvent)=>{\n            if (keydownMouseoverEvent.key === 'Escape') (0, $0ae57bdd7001c75f$export$2e2bcd8739ae039)(li);\n        });\n    });\n    // Close other dropdowns when opening a new one\n    items.forEach((li)=>{\n        // Bail if no dropdown\n        if (!li.classList.contains('menu-item-has-children')) return;\n        const dropdownToggle = li.querySelector('.dropdown-toggle');\n        const sameLevelDropdowns = li.parentNode.querySelectorAll(':scope > .menu-item-has-children');\n        // Add event listener to dropdown toggle\n        dropdownToggle.addEventListener('click', ()=>{\n            // We want to close other dropdowns only when a new one is opened\n            if (!dropdownToggle.classList.contains('toggled-on')) return;\n            sameLevelDropdowns.forEach((sameLevelDropdown)=>{\n                if (sameLevelDropdown !== li) {\n                    // Close all other sub level dropdowns\n                    sameLevelDropdown.querySelectorAll('.menu-item').forEach((subLi)=>{\n                        (0, $0ae57bdd7001c75f$export$2e2bcd8739ae039)(subLi);\n                    });\n                    // Close other same level dropdowns\n                    (0, $0ae57bdd7001c75f$export$2e2bcd8739ae039)(sameLevelDropdown);\n                }\n            });\n        });\n    });\n}\nvar $842dcce66d222c17$export$2e2bcd8739ae039 = $842dcce66d222c17$var$closeSubMenuHandler;\n\n\n// Add proper link labels for screen readers\nfunction $fb96ea7a2cd7ec0f$var$a11yAddDropdownToggleLabelsClick(items) {\n    items.forEach((li)=>{\n        // If .dropdown-toggle does not exist then do nothing\n        if (!li.querySelector('.dropdown-toggle')) return;\n        // Add helper class to dropdown-toggle\n        li.querySelector('.dropdown-toggle').classList.add('menu-item-clickable');\n        // Remove .dropdown-toggle class\n        li.querySelector('.dropdown-toggle').classList.remove('dropdown-toggle');\n        // Get the dropdown-button\n        const dropdownButton = li.querySelector('.menu-item-clickable');\n        // Get the link text that is children of this item\n        const linkText = dropdownButton.innerHTML;\n        // Add the aria-label to the dropdown button\n        // eslint-disable-next-line camelcase, no-undef\n        dropdownButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n    });\n}\nvar $fb96ea7a2cd7ec0f$export$2e2bcd8739ae039 = $fb96ea7a2cd7ec0f$var$a11yAddDropdownToggleLabelsClick;\n\n\n// Import required modules\n\n// Accessible keyboard navigation for dropdown menus\nfunction $3776d5521f669919$var$a11yDropdownMenuKeyboardNavigationClick(items, focusableElements) {\n    focusableElements.forEach((item)=>{\n        item.addEventListener('keyup', (e)=>{\n            // Get this item\n            const thisElement = e.target;\n            // Get this menu-item\n            // eslint-disable-next-line no-unused-vars\n            const thisMenuItem = thisElement.parentNode;\n            // Close previous dropdown if this parent contains id main-menu\n            if (thisElement.parentNode.parentNode.id === 'main-menu' || thisElement.classList.contains('button-nav') && thisElement.parentNode.parentNode.id === 'main-menu') // If we have previous item\n            {\n                if (thisElement.parentNode.previousElementSibling) {\n                    // Get the previous item\n                    const previousItem = thisElement.parentNode.previousElementSibling;\n                    // Get main level sub-menu\n                    const mainLevelSubMenu = previousItem.querySelector('.sub-menu');\n                    // If sub-menu found, close nested sub-menus first\n                    if (mainLevelSubMenu && mainLevelSubMenu.querySelectorAll('.menu-item-has-children')) mainLevelSubMenu.querySelectorAll('.menu-item-has-children').forEach((subMenu)=>{\n                        // Get the previous item's dropdown\n                        const previousItemDropdownToggle = subMenu.querySelector('.dropdown-toggle');\n                        const previousItemDropdown = subMenu.querySelector('.sub-menu');\n                        // Remove toggled-on class from previous item button\n                        previousItemDropdownToggle.classList.remove('toggled-on');\n                        // Remove toggled-on class from previous sibling\n                        previousItemDropdown.classList.remove('toggled-on');\n                        // Change toggle button aria-label\n                        // eslint-disable-next-line camelcase, no-undef\n                        previousItemDropdownToggle.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${previousItemDropdownToggle.innerText}`);\n                        // Change toggle button aria-expanded\n                        previousItemDropdownToggle.setAttribute('aria-expanded', 'false');\n                    });\n                    // Close main level sub-menu\n                    const previousItemDropdownToggle = previousItem.querySelector('.dropdown-toggle');\n                    const previousItemDropdown = previousItem.querySelector('.sub-menu');\n                    if (previousItemDropdownToggle && previousItemDropdown) {\n                        // Remove toggled-on class from previous item button\n                        previousItemDropdownToggle.classList.remove('toggled-on');\n                        // Remove toggled-on class from previous sibling\n                        previousItemDropdown.classList.remove('toggled-on');\n                        // Change toggle button aria-label\n                        // eslint-disable-next-line camelcase, no-undef\n                        previousItemDropdownToggle.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${previousItemDropdownToggle.innerText}`);\n                        // Change toggle button aria-expanded\n                        previousItemDropdownToggle.setAttribute('aria-expanded', 'false');\n                    }\n                }\n            }\n        });\n        // NVDA supported keyboard navigation (NVDA and mobile need click event to work)\n        (0, $e61912f31b7169e2$export$2e2bcd8739ae039)(item, [\n            'click',\n            'keydown',\n            'keypress'\n        ], (e)=>{\n            // Get this link or button\n            const thisElement = e.target;\n            // Define the elements of this dropdown\n            const firstDropdown = thisElement.parentNode.parentNode.parentNode.querySelector('.sub-menu');\n            const thisDropdown = thisElement.nextElementSibling;\n            const dropdownToggleButton = thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle');\n            // Open navigation on Enter, e.type click is for NVDA\n            if (e.key === 'Enter' || e.type === 'click') {\n                // If this item is a hyperlink, do nothing. We want to use Enter only with buttons\n                if (thisElement.tagName === 'A') return;\n                // Get the text of button\n                const linkLabel = thisElement.innerText;\n                // Toggle toggled-on class\n                thisElement.classList.toggle('toggled-on');\n                // If aria-expanded is false, set it to true\n                if (thisElement.getAttribute('aria-expanded') === 'false') {\n                    // Set aria-expanded to true\n                    thisElement.setAttribute('aria-expanded', 'true');\n                    // Set aria-label of the dropdown button\n                    // eslint-disable-next-line camelcase, no-undef\n                    thisElement.setAttribute('aria-label', `${air_light_screenReaderText.collapse_for} ${linkLabel}`);\n                } else {\n                    // Set aria-expanded to false\n                    thisElement.setAttribute('aria-expanded', 'false');\n                    // Set aria-label of the dropdown button\n                    // eslint-disable-next-line camelcase, no-undef\n                    thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                }\n                // Toggle the dropdown\n                if (thisDropdown && !thisDropdown.classList.contains('toggled-on')) // Add toggled-on class to this dropdown\n                thisDropdown.classList.add('toggled-on');\n                else // Remove toggled-on class from this dropdown\n                // eslint-disable-next-line no-lonely-if\n                if (thisDropdown) thisDropdown.classList.remove('toggled-on');\n            }\n            // Close navigation on Escape\n            if (e.key === 'Escape') {\n                // Close mobile nav if no sub-menu is open\n                if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) {\n                    document.body.classList.remove('js-nav-active');\n                    // Move focus back to nav-toggle\n                    document.getElementById('nav-toggle').focus();\n                }\n                // If we're on main level and nav item is not open, do nothing\n                if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) return;\n                // Remove toggled-on classes from this dropdown\n                firstDropdown.classList.remove('toggled-on');\n                // Set aria expanded attribute to false\n                dropdownToggleButton.setAttribute('aria-expanded', 'false');\n                // Remove toggled-on\n                dropdownToggleButton.classList.remove('toggled-on');\n                // Get the link label of dropdown link\n                const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n                // Set aria label attribute\n                // eslint-disable-next-line camelcase, no-undef\n                dropdownToggleButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                // If we're on button, add aria-expanded to false\n                if (thisElement.classList.contains('dropdown-toggle')) {\n                    thisElement.setAttribute('aria-expanded', 'false');\n                    // Set aria-label of the dropdown button\n                    // eslint-disable-next-line camelcase, no-undef\n                    thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                }\n                // Move focus back to previous .dropdown-toggle, but only if we're not on main level\n                if (thisElement.parentNode.parentNode.id !== 'main-menu') // Delay toggling for NVDA for 100 ms\n                setTimeout(()=>{\n                    dropdownToggleButton.focus();\n                }, 100);\n            }\n            // If no arrow keys used, do not continue\n            if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n            // Arrow keys\n            switch(e.code){\n                // ArrowUp\n                case 'ArrowUp':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If we're on the sub-menu, move up\n                    if (thisElement.parentNode.parentNode.previousElementSibling && thisElement.parentNode.parentNode.previousElementSibling.classList.contains('dropdown-toggle')) // Focus to the previous link\n                    thisElement.parentNode.parentNode.previousElementSibling.focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is true, close the dropdown\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n                        // Remove toggled-on class from this dropdown\n                        thisDropdown.classList.remove('toggled-on');\n                        thisElement.classList.remove('toggled-on');\n                        // Set aria-expanded attribute to false\n                        thisElement.setAttribute('aria-expanded', 'false');\n                        // Get the link label of .dropdown link\n                        const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n                        // Set aria-label of the dropdown button\n                        // eslint-disable-next-line camelcase, no-undef\n                        thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                        // Move focus back to previous .dropdown-toggle\n                        dropdownToggleButton.focus();\n                    }\n                    // If this is a correct element, focus to the previous link\n                    if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n                        // If there is no previous items, bail\n                        if (!thisElement.parentNode.previousElementSibling) return;\n                        // Get the previous link\n                        const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        const previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle');\n                        // If previous element is .dropdown-toggle element, focus to it\n                        if (previousToggle && !thisElement.querySelector('.dropdown-toggle')) previousToggle.focus();\n                        else // If previous element is a link, focus to it\n                        previousLink.focus();\n                    }\n                    break;\n                // ArrowDown\n                case 'ArrowDown':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If we're on the sub-menu, move down\n                    if (thisElement.parentNode.parentNode.nextElementSibling && thisElement.parentNode.parentNode.nextElementSibling.classList.contains('dropdown-toggle')) // Focus to the next link\n                    thisElement.parentNode.parentNode.nextElementSibling.focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is true, move down\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') // Focus to the next link\n                    thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n                    // (if we are not inside sub-menu)\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && !thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n                        // Open sub-menu\n                        thisElement.click();\n                        // Focus to the next link under sub-menu\n                        thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                        // Don't do anything else\n                        return;\n                    }\n                    // If we are in fact in sub menu, move to next link\n                    if (thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n                        // Focus to the next link or .dropdown-toggle\n                        // Generally focus the next link\n                        if (thisElement.parentNode.nextElementSibling.querySelector(':scope > a')) thisElement.parentNode.nextElementSibling.querySelector(':scope > a').focus();\n                        else // If there is no next link, focus to the next .dropdown-toggle\n                        thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle').focus();\n                    }\n                    // If this is a correct element, focus to the next link\n                    if ((thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') && !thisElement.classList.contains('dropdown-toggle')) {\n                        // If there is no next items, bail\n                        if (!thisElement.parentNode.nextElementSibling) return;\n                        // Get the next link\n                        const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        let nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle');\n                        // If this has class .dropdown-item, jump to the next .dropdown-toggle\n                        if (thisElement.classList.contains('dropdown-item')) // If there is a toggle\n                        {\n                            if (thisElement.nextElementSibling) {\n                                // Get the dropdown-toggle element\n                                nextToggle = thisElement.nextElementSibling;\n                                // If next element is .dropdown-toggle element, focus to it\n                                if (nextToggle) nextToggle.focus();\n                            }\n                        }\n                        // If next element is .dropdown-toggle element, focus to it\n                        if (nextToggle && !thisElement.querySelector('.dropdown-toggle')) nextToggle.focus();\n                        else // If next element is a link, focus to it\n                        nextLink.focus();\n                    }\n                    break;\n                // ArrowLeft\n                case 'ArrowLeft':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If we are on the first link, move to the dropdown-toggle and close menu\n                    if (thisElement.parentNode.previousElementSibling === null && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Focus to the previous link\n                        thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').focus();\n                        // Close the dropdown\n                        thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').click();\n                        // Don't do anything else\n                        return;\n                    }\n                    // If this is a .dropdown-toggle button and aria-expanded is true, move left\n                    if (thisElement.parentNode.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') // Focus to the previous link\n                    thisElement.parentNode.previousElementSibling.querySelector('a').focus();\n                    // If this is a .dropdown-toggle button and aria-expanded is false, close the dropdown\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Remove toggled-on class from this dropdown\n                        thisDropdown.classList.remove('toggled-on');\n                        // Set aria-expanded attribute to false\n                        thisElement.setAttribute('aria-expanded', 'false');\n                        // Get the link label of .dropdown link\n                        const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n                        // Set aria-label of the dropdown button\n                        // eslint-disable-next-line camelcase, no-undef\n                        thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n                        // Move focus back to previous .dropdown-toggle\n                        dropdownToggleButton.focus();\n                    }\n                    // If this is a correct element, focus to the previous link\n                    if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n                        // If this is a .dropdown-toggle button and aria-expanded is false,\n                        // move to the link directly before it\n                        if (thisElement.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false') {\n                            // Focus to the previous link\n                            thisElement.previousElementSibling.focus();\n                            // Don't do anything else\n                            return;\n                        }\n                        // If there is no previous items, bail\n                        if (!thisElement.parentNode.previousElementSibling) return;\n                        // Get the previous link\n                        const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        const previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle');\n                        // If previous element is .dropdown-toggle element, focus to it\n                        if (previousToggle) previousToggle.focus();\n                        else // If previous element is a link, focus to it\n                        previousLink.focus();\n                    }\n                    break;\n                // ArrowRight\n                case 'ArrowRight':\n                    // Stop propagation\n                    e.stopPropagation();\n                    // Stop scrolling\n                    e.preventDefault();\n                    // If this is a .dropdown-toggle button and aria-expanded is true, move right\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') // Focus to the next link\n                    thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                    // If this has class .dropdown-item, jump to the next .dropdown-toggle\n                    if (thisElement.nextElementSibling) {\n                        thisElement.nextElementSibling.focus();\n                        // Disable other actions if this is a .dropdown-item\n                        if (thisElement.classList.contains('dropdown-item')) return;\n                    }\n                    // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Open sub-menu\n                        thisElement.click();\n                        // Do nothing else\n                        return;\n                    }\n                    // If this is a dropdown-toggle button and aria-expanded is true, move right\n                    if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n                        // Focus to the next link\n                        thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n                        // Don't do anything else\n                        return;\n                    }\n                    // If this is a correct element, focus to the previous link\n                    if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n                        // If there is no next items, bail\n                        if (!thisElement.parentNode.nextElementSibling) return;\n                        // Get the next link\n                        const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n                        // Get .dropdown-toggle element\n                        const nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle');\n                        // If next element is .dropdown-toggle element, focus to it\n                        if (nextToggle) nextToggle.focus();\n                        else // If next element is a link, focus to it\n                        nextLink.focus();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n    });\n}\nvar $3776d5521f669919$export$2e2bcd8739ae039 = $3776d5521f669919$var$a11yDropdownMenuKeyboardNavigationClick;\n\n\nconst $d0ae5f9e0cfcbf8e$export$9c43844ef57ea1d0 = ()=>{\n    const navPrimary = document.querySelector('.nav-primary');\n    // If .nav-primary doesn't exist, don't continue\n    if (!navPrimary) return;\n    // Define globals\n    const menuItems = navPrimary.querySelectorAll('.menu-item');\n    // Define focusable elements on sub-menu (.menu-item a, .dropdown button)\n    const focusableElementsforDropdown = document.querySelectorAll('.menu-item a, .dropdown button, .button-nav');\n    // If main-menu is not found, bail\n    if (!document.getElementById('main-menu')) return;\n    // Dropdown menus\n    (0, $0a7c106768bacca4$export$2e2bcd8739ae039)(menuItems);\n    (0, $9783fac5bc95fd72$export$2e2bcd8739ae039)(menuItems, focusableElementsforDropdown);\n    // Dropdown on mouse hover\n    (0, $de6955212554dcbb$export$2e2bcd8739ae039)(menuItems);\n    // Check for submenu overflow\n    (0, $81a31256e9729810$export$2e2bcd8739ae039)(menuItems);\n};\nconst $d0ae5f9e0cfcbf8e$export$732b8fa89b3a0745 = ()=>{\n    // If main-menu is not found, bail\n    if (!document.getElementById('main-menu')) return;\n    // Search for all menu items that have submenus\n    const dropdownMenuItems = document.querySelectorAll('.menu-item-has-children');\n    // Convert submenus to clickable elements\n    (0, $0fb4353588d70701$export$2e2bcd8739ae039)(dropdownMenuItems);\n    // Define globals\n    const menuItems = document.querySelectorAll('.menu-item');\n    // Define focusable elements on sub-menu (.menu-item a, .dropdown button)\n    const focusableElementsforDropdown = document.querySelectorAll('.menu-item a, .dropdown button, .button-nav');\n    // Dropdown menus\n    (0, $fb96ea7a2cd7ec0f$export$2e2bcd8739ae039)(menuItems);\n    (0, $3776d5521f669919$export$2e2bcd8739ae039)(menuItems, focusableElementsforDropdown);\n    // Handle different scenarios when menus should be closed\n    (0, $842dcce66d222c17$export$2e2bcd8739ae039)(menuItems);\n};\nconst $d0ae5f9e0cfcbf8e$export$3a2707b50c3b4a73 = ()=>{\n    // If burger toggle is not found, bail\n    if (!document.getElementById('nav-toggle')) {\n        // eslint-disable-next-line no-console\n        console.log('Warning: No nav-toggle found.');\n        return;\n    }\n    function navToggle(e) {\n        // If clicked with mouse or enter key\n        if (e.type === 'click' || e.keyCode === 13) {\n            // Activate nav\n            document.body.classList.toggle('js-nav-active');\n            // Scroll to top when triggering mobile navigation\n            // to ensure no gaps are between header and navigation\n            // Please note, if you use sticky-nav, comment out the next line\n            window.scrollTo(0, 0);\n            // Toggle aria-expanded attribute, if it's false, change to true and vice versa\n            if (document.getElementById('nav-toggle').getAttribute('aria-expanded') === 'false') document.getElementById('nav-toggle').setAttribute('aria-expanded', 'true');\n            else document.getElementById('nav-toggle').setAttribute('aria-expanded', 'false');\n            // Toggle aria-label\n            // eslint-disable-next-line camelcase, no-undef\n            if (document.getElementById('nav-toggle').getAttribute('aria-label') === air_light_screenReaderText.expand_toggle) // eslint-disable-next-line camelcase, no-undef\n            document.getElementById('nav-toggle').setAttribute('aria-label', air_light_screenReaderText.collapse_toggle);\n            else // eslint-disable-next-line camelcase, no-undef\n            document.getElementById('nav-toggle').setAttribute('aria-label', air_light_screenReaderText.expand_toggle);\n            // Center vertically the absolute positioned mobile dropdown toggles by setting fixed height\n            (0, $8acd1c8dc1ad6dc5$export$2e2bcd8739ae039)();\n            // Focusable elements\n            const navContainer = document.getElementById('nav');\n            const focusableElements = [\n                ...navContainer.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])')\n            ].filter((el)=>!el.hasAttribute('disabled')).filter((el)=>!!(el.offsetWidth || el.offsetHeight || el.getClientRects().length));\n            focusableElements.forEach((menuItem)=>{\n                menuItem.addEventListener('keydown', (0, $8396852b9d810f79$export$2e2bcd8739ae039));\n            });\n        }\n    }\n    // When clicking #nav-toggle, add .js-nav-active body class\n    (0, $e61912f31b7169e2$export$2e2bcd8739ae039)(document.getElementById('nav-toggle'), [\n        'click',\n        'keydown',\n        'keypress'\n    ], navToggle);\n    // Get all dropdown-toggles\n    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');\n    // Loop through dropdown-toggles\n    dropdownToggles.forEach((dropdownToggle)=>{\n        // When clicking a dropdown-toggle, add .js-dropdown-active class to the parent .menu-item\n        (0, $e61912f31b7169e2$export$2e2bcd8739ae039)(dropdownToggle, [\n            'click',\n            'keydown',\n            'keypress'\n        ], (0, $8acd1c8dc1ad6dc5$export$2e2bcd8739ae039));\n    });\n    // Calculate mobile nav-toggle position\n    (0, $97724681587b67ff$export$2e2bcd8739ae039)();\n};\n// Sticky navigation\n// eslint-disable-next-line no-unused-vars\nconst $d0ae5f9e0cfcbf8e$export$19f6899aad5f4764 = ()=>{\n    function initStickyNavStyles() {\n        // Add default styles for sticky navigation as <style>\n        const style = document.createElement('style');\n        style.innerHTML = `\n    .site-header {\n      transition: all 100ms cubic-bezier(.4, 0, .2, 1);\n      overflow: visible;\n      width: 100%;\n      z-index: 100;\n    }\n\n    .site-header.is-fixed {\n      animation-duration: 300ms;\n      animation-iteration-count: 1;\n      animation-name: roll-in;\n      background-color: var(--color-white);\n      border-bottom: 1px solid var(--color-black);\n      left: 0;\n      position: fixed;\n      top: 0;\n    }\n\n    @keyframes roll-in {\n      0% {\n        opacity: 0;\n        top: -100%;\n      }\n\n      100% {\n        opacity: 1;\n        top: 0;\n      }\n    }`;\n        document.head.appendChild(style);\n    }\n    function initStickyNav() {\n        // Get --width-max-mobile from CSS\n        const widthMaxMobile = getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile');\n        // Let's see if we are on mobile viewport\n        const isMobile = window.matchMedia(`(max-width: ${widthMaxMobile})`).matches;\n        // If things are not okay, bail\n        if (isMobile) return;\n        const siteHeader = document.querySelector('.site-header');\n        const headerHeight = getComputedStyle(siteHeader).height.split('px')[0];\n        const scrollValue = window.scrollY;\n        if (scrollValue > headerHeight) siteHeader.classList.add('is-fixed');\n        else if (scrollValue < headerHeight) siteHeader.classList.remove('is-fixed');\n        if (window.pageYOffset > headerHeight) siteHeader.classList.add('is-fixed');\n    }\n    window.addEventListener('scroll', initStickyNav);\n    window.addEventListener('DOMContentLoaded', initStickyNavStyles);\n};\n// Reinit some things\nwindow.addEventListener('resize', ()=>{\n    // Center vertically the absolute positioned burger\n    (0, $97724681587b67ff$export$2e2bcd8739ae039)();\n    // Center vertically the absolute positioned mobile dropdown toggles by setting fixed height\n    (0, $8acd1c8dc1ad6dc5$export$2e2bcd8739ae039)();\n    // Check for submenu overflow\n    (0, $81a31256e9729810$export$2e2bcd8739ae039)(document.querySelectorAll('.menu-item'));\n});\n\n\n// Define Javascript is active by changing the body class\ndocument.body.classList.remove('no-js');\ndocument.body.classList.add('js');\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    (0, $78fe155064334c3b$export$2e2bcd8739ae039)();\n    (0, $c70d6dac4ed59eee$export$2e2bcd8739ae039)();\n    (0, $99ac37db4027a3b8$export$554fdaa2aa89d7a4)();\n    (0, $99ac37db4027a3b8$export$636763119f974537)();\n    (0, $adbf55b4d2ea0be3$export$2e2bcd8739ae039)();\n    (0, $a8e8a0c3e850e7dd$export$2e2bcd8739ae039)();\n    // Init navigation\n    // If you want to enable click based navigation, comment navDesktop() and uncomment navClick()\n    // Remember to enable styles in sass/navigation/navigation.scss\n    (0, $d0ae5f9e0cfcbf8e$export$9c43844ef57ea1d0)();\n    // navClick();\n    (0, $d0ae5f9e0cfcbf8e$export$3a2707b50c3b4a73)();\n    // Uncomment if you like to use a sticky navigation\n    // navSticky();\n    // Fit video embeds to container\n    (0, $dc0908bd51a5de19$export$2e2bcd8739ae039)('.wp-has-aspect-ratio iframe');\n});\n\n})();\n//# sourceMappingURL=front-end.js.map\n","/* eslint-disable max-len, no-param-reassign, no-unused-vars */\n/**\n * Air theme JavaScript.\n */\n\n// Import modules\nimport reframe from 'reframe.js';\nimport { styleExternalLinks, initExternalLinkLabels } from './modules/external-link';\nimport initAnchors from './modules/anchors';\nimport backToTop from './modules/top';\nimport initA11ySkipLink from './modules/a11y-skip-link';\nimport initA11yFocusSearchField from './modules/a11y-focus-search-field';\nimport {\n  navSticky, navClick, navDesktop, navMobile,\n} from './modules/navigation';\n\n// Define Javascript is active by changing the body class\ndocument.body.classList.remove('no-js');\ndocument.body.classList.add('js');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  initAnchors();\n  backToTop();\n  styleExternalLinks();\n  initExternalLinkLabels();\n  initA11ySkipLink();\n  initA11yFocusSearchField();\n\n  // Init navigation\n  // If you want to enable click based navigation, comment navDesktop() and uncomment navClick()\n  // Remember to enable styles in sass/navigation/navigation.scss\n  navDesktop();\n  // navClick();\n  navMobile();\n\n  // Uncomment if you like to use a sticky navigation\n  // navSticky();\n\n  // Fit video embeds to container\n  reframe('.wp-has-aspect-ratio iframe');\n});\n","/**\n  reframe.js - Reframe.js: responsive iframes for embedded content\n  @version v4.0.2\n  @link https://github.com/yowainwright/reframe.ts#readme\n  @author Jeff Wainwright <yowainwright@gmail.com> (http://jeffry.in)\n  @license MIT\n**/\n/**\n * REFRAME.TS 🖼\n * ---\n * @param target\n * @param cName\n * @summary defines the height/width ratio of the targeted <element>\n */\nfunction reframe(target, cName) {\n    var _a, _b;\n    var frames = typeof target === 'string' ? document.querySelectorAll(target) : target;\n    var c = cName || 'js-reframe';\n    if (!('length' in frames))\n        frames = [frames];\n    for (var i = 0; i < frames.length; i += 1) {\n        var frame = frames[i];\n        var hasClass = frame.className.split(' ').indexOf(c) !== -1;\n        if (hasClass || frame.style.width.indexOf('%') > -1) {\n            return;\n        }\n        // get height width attributes\n        var height = frame.getAttribute('height') || frame.offsetHeight;\n        var width = frame.getAttribute('width') || frame.offsetWidth;\n        var heightNumber = typeof height === 'string' ? parseInt(height) : height;\n        var widthNumber = typeof width === 'string' ? parseInt(width) : width;\n        // general targeted <element> sizes\n        var padding = (heightNumber / widthNumber) * 100;\n        // created element <wrapper> of general reframed item\n        // => set necessary styles of created element <wrapper>\n        var div = document.createElement('div');\n        div.className = c;\n        var divStyles = div.style;\n        divStyles.position = 'relative';\n        divStyles.width = '100%';\n        divStyles.paddingTop = \"\".concat(padding, \"%\");\n        // set necessary styles of targeted <element>\n        var frameStyle = frame.style;\n        frameStyle.position = 'absolute';\n        frameStyle.width = '100%';\n        frameStyle.height = '100%';\n        frameStyle.left = '0';\n        frameStyle.top = '0';\n        // reframe targeted <element>\n        (_a = frame.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(div, frame);\n        (_b = frame.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(frame);\n        div.appendChild(frame);\n    }\n}\n\nexport { reframe as default };\n","/* eslint-disable no-param-reassign */\nimport getLocalization from './localization';\n\nfunction isLinkExternal(link, localDomains) {\n  // Empty links are not external\n  if (!link.length) {\n    return false;\n  }\n\n  const exceptions = [\n    '#',\n    'tel:',\n    'mailto:',\n    '/',\n  ];\n\n  // Check if the url starts with some of the exceptions\n  const isException = exceptions.some((exception) => {\n    const compare = new RegExp(`^${exception}`, 'g');\n    return compare.test(link);\n  });\n\n  if (isException) {\n    return false;\n  }\n\n  let linkUrl;\n  try {\n    linkUrl = new URL(link);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(`Invalid URL: ${link}`);\n    return false;\n  }\n  // Check if host is one of the local domains\n  return !localDomains.some((domain) => linkUrl.host === domain);\n}\n\n/**\n  * Try to get image alt texts from inside a link\n  * to use in aria-label, when only elements inside\n  * of link are images\n  * @param {*} link DOM link element\n  * @returns string\n  */\nexport function getChildAltText(link) {\n  const children = [...link.children];\n\n  if (children.length === 0) {\n    return '';\n  }\n\n  const childImgs = children.filter((child) => child.tagName.toLowerCase() === 'img');\n\n  // If there are other elements than img elements, no need to add aria-label\n  if (children.length !== childImgs.length) {\n    return '';\n  }\n\n  // Find alt texts and add to array\n  const altTexts = childImgs.filter((child) => child.alt && child.alt !== '').map((child) => child.alt);\n\n  // If there is no alt texts,\n  if (!altTexts.length) {\n    return '';\n  }\n\n  return altTexts.join(', ');\n}\n\nexport function styleExternalLinks() {\n  let localDomains = [\n    window.location.host,\n  ];\n\n  if (typeof window.air_light_externalLinkDomains !== 'undefined') {\n    localDomains = localDomains.concat(window.air_light_externalLinkDomains);\n  }\n\n  const links = document.querySelectorAll('a');\n\n  const externalLinks = [...links].filter((link) => isLinkExternal(link.href, localDomains));\n\n  // eslint-disable-next-line consistent-return\n  externalLinks.forEach((externalLink) => {\n    // Abort mission if there is only img element inside of link\n    if (externalLink.childElementCount === 1 && externalLink.children[0].tagName.toLowerCase() === 'img') {\n      return false;\n    }\n\n    if (!externalLink.classList.contains('no-external-link-label')) {\n      const textContent = externalLink.textContent.trim().length\n        ? externalLink.textContent.trim() : getChildAltText(externalLink);\n      if (textContent && !externalLink.getAttribute('aria-label')) {\n        const ariaLabel = externalLink.target === '_blank' ? `${textContent}: ${getLocalization('external_link')}, ${getLocalization('target_blank')}` : `${textContent}: ${getLocalization('external_link')}`;\n        externalLink.setAttribute('aria-label', ariaLabel);\n      }\n    }\n\n    // Arrow icon won't be added if one of these classes is defined for the link\n    const classExceptions = [\n      'no-external-link-indicator',\n      'global-link',\n      'button',\n    ];\n\n    if (!classExceptions.some((className) => externalLink.classList.contains(className))) {\n      // Add SVG arrow icon\n      externalLink.insertAdjacentHTML('beforeend', '<svg class=\"external-link-icon\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 9 9\"><path d=\"M4.499 1.497h4v4m0-4l-7 7\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>');\n      externalLink.classList.add('is-external-link');\n    }\n  });\n}\n\nexport function initExternalLinkLabels() {\n  // Add aria-labels to links without text or aria-labels and contain image with alt text\n  const links = [...document.querySelectorAll('a')];\n  // eslint-disable-next-line no-unused-vars\n  const linksWithImgChildren = links.forEach((link) => {\n    // If link already has text content or an aria label no need to add aria-label\n    if (link.textContent.trim() !== '' || link.ariaLabel) {\n      return;\n    }\n\n    const ariaLabel = getChildAltText(link);\n    if (ariaLabel !== '') {\n      link.ariaLabel = ariaLabel;\n    }\n  });\n}\n","export default function getLocalization(stringKey) {\n  if (typeof window.air_light_screenReaderText === 'undefined' || typeof window.air_light_screenReaderText[stringKey] === 'undefined') {\n    // eslint-disable-next-line no-console\n    console.error(`Missing translation for ${stringKey}`);\n    return '';\n  }\n  return window.air_light_screenReaderText[stringKey];\n}\n","/* eslint-disable no-param-reassign, no-undef */\n\nimport MoveTo from 'moveto';\n\nconst initAnchors = () => {\n  const easeFunctions = {\n    easeInQuad(t, b, c, d) { t /= d; return c * t * t + b; },\n    easeOutQuad(t, b, c, d) { t /= d; return -c * t * (t - 2) + b; },\n  };\n\n  const moveTo = new MoveTo(\n    { ease: 'easeInQuad' },\n    easeFunctions,\n  );\n\n  let triggers = document.querySelectorAll('a[href*=\"#\"]:not([href=\"#\"]):not(#top)');\n\n  triggers = Array.from(triggers);\n\n  triggers.forEach((trigger) => {\n    moveTo.registerTrigger(trigger);\n    const targetId = trigger.hash.substring(1);\n    const target = document.getElementById(targetId);\n\n    trigger.addEventListener('click', (event) => {\n      event.preventDefault(); // Prevent default behavior of anchor links\n\n      // If the trigger is nav-link, close nav\n      if (trigger.classList.contains('nav-link') || trigger.classList.contains('dropdown-item')) {\n        document.body.classList.remove('js-nav-active');\n\n        // Additional navigation cleanup\n        const html = document.documentElement;\n        const container = document.getElementById('main-navigation-wrapper');\n        const menu = container?.querySelector('ul');\n        const button = document.getElementById('nav-toggle');\n\n        if (html) html.classList.remove('disable-scroll');\n        if (container) container.classList.remove('is-active');\n        if (button) {\n          button.classList.remove('is-active');\n          button.setAttribute('aria-expanded', 'false');\n        }\n        if (menu) menu.setAttribute('aria-expanded', 'false');\n      }\n\n      // Check if the target element exists on the current page\n      if (target) {\n        // Scroll to the target element\n        moveTo.move(target);\n\n        // Update URL history\n        window.history.pushState('', '', trigger.hash);\n\n        // Focus on the target element after a delay\n        setTimeout(() => {\n          target.setAttribute('tabindex', '-1');\n          target.focus();\n        }, 500);\n      } else {\n        // Navigate to the target page\n        window.location.href = trigger.href;\n      }\n    });\n  });\n};\n\nexport default initAnchors;\n","/*!\n * MoveTo - A lightweight scroll animation javascript library without any dependency.\n * Version 1.8.2 (28-06-2019 14:30)\n * Licensed under MIT\n * Copyright 2019 Hasan Aydoğdu <hsnaydd@gmail.com>\n */\n\n\"use strict\";\n\nvar MoveTo = function () {\n  /**\n   * Defaults\n   * @type {object}\n   */\n  var defaults = {\n    tolerance: 0,\n    duration: 800,\n    easing: 'easeOutQuart',\n    container: window,\n    callback: function callback() {}\n  };\n  /**\n   * easeOutQuart Easing Function\n   * @param  {number} t - current time\n   * @param  {number} b - start value\n   * @param  {number} c - change in value\n   * @param  {number} d - duration\n   * @return {number} - calculated value\n   */\n\n  function easeOutQuart(t, b, c, d) {\n    t /= d;\n    t--;\n    return -c * (t * t * t * t - 1) + b;\n  }\n  /**\n   * Merge two object\n   *\n   * @param  {object} obj1\n   * @param  {object} obj2\n   * @return {object} merged object\n   */\n\n\n  function mergeObject(obj1, obj2) {\n    var obj3 = {};\n    Object.keys(obj1).forEach(function (propertyName) {\n      obj3[propertyName] = obj1[propertyName];\n    });\n    Object.keys(obj2).forEach(function (propertyName) {\n      obj3[propertyName] = obj2[propertyName];\n    });\n    return obj3;\n  }\n\n  ;\n  /**\n   * Converts camel case to kebab case\n   * @param  {string} val the value to be converted\n   * @return {string} the converted value\n   */\n\n  function kebabCase(val) {\n    return val.replace(/([A-Z])/g, function ($1) {\n      return '-' + $1.toLowerCase();\n    });\n  }\n\n  ;\n  /**\n   * Count a number of item scrolled top\n   * @param  {Window|HTMLElement} container\n   * @return {number}\n   */\n\n  function countScrollTop(container) {\n    if (container instanceof HTMLElement) {\n      return container.scrollTop;\n    }\n\n    return container.pageYOffset;\n  }\n\n  ;\n  /**\n   * MoveTo Constructor\n   * @param {object} options Options\n   * @param {object} easeFunctions Custom ease functions\n   */\n\n  function MoveTo() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var easeFunctions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.options = mergeObject(defaults, options);\n    this.easeFunctions = mergeObject({\n      easeOutQuart: easeOutQuart\n    }, easeFunctions);\n  }\n  /**\n   * Register a dom element as trigger\n   * @param  {HTMLElement} dom Dom trigger element\n   * @param  {function} callback Callback function\n   * @return {function|void} unregister function\n   */\n\n\n  MoveTo.prototype.registerTrigger = function (dom, callback) {\n    var _this = this;\n\n    if (!dom) {\n      return;\n    }\n\n    var href = dom.getAttribute('href') || dom.getAttribute('data-target'); // The element to be scrolled\n\n    var target = href && href !== '#' ? document.getElementById(href.substring(1)) : document.body;\n    var options = mergeObject(this.options, _getOptionsFromTriggerDom(dom, this.options));\n\n    if (typeof callback === 'function') {\n      options.callback = callback;\n    }\n\n    var listener = function listener(e) {\n      e.preventDefault();\n\n      _this.move(target, options);\n    };\n\n    dom.addEventListener('click', listener, false);\n    return function () {\n      return dom.removeEventListener('click', listener, false);\n    };\n  };\n  /**\n   * Move\n   * Scrolls to given element by using easeOutQuart function\n   * @param  {HTMLElement|number} target Target element to be scrolled or target position\n   * @param  {object} options Custom options\n   */\n\n\n  MoveTo.prototype.move = function (target) {\n    var _this2 = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (target !== 0 && !target) {\n      return;\n    }\n\n    options = mergeObject(this.options, options);\n    var distance = typeof target === 'number' ? target : target.getBoundingClientRect().top;\n    var from = countScrollTop(options.container);\n    var startTime = null;\n    var lastYOffset;\n    distance -= options.tolerance; // rAF loop\n\n    var loop = function loop(currentTime) {\n      var currentYOffset = countScrollTop(_this2.options.container);\n\n      if (!startTime) {\n        // To starts time from 1, we subtracted 1 from current time\n        // If time starts from 1 The first loop will not do anything,\n        // because easing value will be zero\n        startTime = currentTime - 1;\n      }\n\n      var timeElapsed = currentTime - startTime;\n\n      if (lastYOffset) {\n        if (distance > 0 && lastYOffset > currentYOffset || distance < 0 && lastYOffset < currentYOffset) {\n          return options.callback(target);\n        }\n      }\n\n      lastYOffset = currentYOffset;\n\n      var val = _this2.easeFunctions[options.easing](timeElapsed, from, distance, options.duration);\n\n      options.container.scroll(0, val);\n\n      if (timeElapsed < options.duration) {\n        window.requestAnimationFrame(loop);\n      } else {\n        options.container.scroll(0, distance + from);\n        options.callback(target);\n      }\n    };\n\n    window.requestAnimationFrame(loop);\n  };\n  /**\n   * Adds custom ease function\n   * @param {string}   name Ease function name\n   * @param {function} fn   Ease function\n   */\n\n\n  MoveTo.prototype.addEaseFunction = function (name, fn) {\n    this.easeFunctions[name] = fn;\n  };\n  /**\n   * Returns options which created from trigger dom element\n   * @param  {HTMLElement} dom Trigger dom element\n   * @param  {object} options The instance's options\n   * @return {object} The options which created from trigger dom element\n   */\n\n\n  function _getOptionsFromTriggerDom(dom, options) {\n    var domOptions = {};\n    Object.keys(options).forEach(function (key) {\n      var value = dom.getAttribute(\"data-mt-\".concat(kebabCase(key)));\n\n      if (value) {\n        domOptions[key] = isNaN(value) ? value : parseInt(value, 10);\n      }\n    });\n    return domOptions;\n  }\n\n  return MoveTo;\n}();\n\nif (typeof module !== 'undefined') {\n  module.exports = MoveTo;\n} else {\n  window.MoveTo = MoveTo;\n}","/* eslint-disable max-len */\nimport MoveTo from 'moveto';\n\nconst backToTop = () => {\n  // Back to top button\n  const moveToTop = new MoveTo({\n    duration: 300,\n    easing: 'easeOutQuart',\n  });\n  const topButton = document.getElementById('top');\n  const focusableElements = document.querySelectorAll(\n    'button, a, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])',\n  );\n\n  function trackScroll() {\n    const scrolled = window.pageYOffset;\n    const scrollAmount = document.documentElement.clientHeight;\n\n    if (scrolled > scrollAmount) {\n      topButton.classList.add('is-visible');\n    }\n\n    if (scrolled < scrollAmount) {\n      topButton.classList.remove('is-visible');\n    }\n  }\n\n  function scroll(focusVisible) {\n    // Check if user prefers reduced motion, if so, just scroll to top\n    const prefersReducedMotion = window.matchMedia(\n      '(prefers-reduced-motion: reduce)',\n    ).matches;\n\n    if (prefersReducedMotion) {\n      focusableElements[0].focus({ focusVisible });\n      return;\n    }\n\n    // Move smoothly to the first focusable element on the page\n    moveToTop.move(focusableElements[0]);\n\n    // Focus too, if on keyboard\n    focusableElements[0].focus({ preventScroll: true, focusVisible });\n  }\n\n  if (topButton) {\n    topButton.addEventListener('click', (event) => {\n      // Don't add hash in the end of the url\n      event.preventDefault();\n\n      // Focus without visibility (as user is not using keyboard)\n      scroll(false);\n    });\n\n    topButton.addEventListener('keydown', (event) => {\n      // Don't propagate keydown event to click event\n      event.preventDefault();\n\n      // Scroll with focus visible\n      scroll(true);\n    });\n  }\n\n  window.addEventListener('scroll', trackScroll);\n};\n\nexport default backToTop;\n","import MoveTo from 'moveto';\n\nconst initA11ySkipLink = () => {\n  // Go through all the headings of the page and select the first one\n  const a11ySkipLinkTarget = document.querySelectorAll('h1, h2, h3, h4, h5, h6')[0];\n  const a11ySkipLink = document.querySelectorAll('.skip-link')[0];\n\n  // Register trigger element\n  // eslint-disable-next-line no-unused-vars, no-restricted-globals\n  const moveTo = new MoveTo();\n\n  // When clicked, move focus to the target element\n\n  if (a11ySkipLink) {\n    a11ySkipLink.addEventListener('click', () => {\n      a11ySkipLinkTarget.setAttribute('tabindex', '-1');\n      a11ySkipLinkTarget.focus();\n      moveTo.move(a11ySkipLinkTarget);\n    });\n  }\n};\n\nexport default initA11ySkipLink;\n","const initA11yFocusSearchField = () => {\n  const urlSearch = window.location.search;\n  const urlParams = new URLSearchParams(urlSearch);\n  if (urlParams.has('s')) {\n    const searchField = document.querySelector('main input[name=\"s\"]');\n    if (searchField) {\n      searchField.focus({ preventScroll: true });\n    }\n  }\n};\n\nexport default initA11yFocusSearchField;\n","/**\n * Navigation.js module\n * The original, accessible navigation module for Air-light\n */\n\n// Import functions needed for the navigation module\nimport addMultipleEventListeners from './navigation/add-multiple-event-listeners';\nimport calculateBurgerMenuPosition from './navigation/calculate-burger-menu-position';\nimport a11yFocusTrap from './navigation/a11y-focus-trap';\nimport calculateDropdownToggleHeight from './navigation/calculate-dropdown-toggle-height';\nimport checkForSubmenuOverflow from './navigation/check-for-submenu-overflow';\nimport dropdownMenuOnHover from './navigation/dropdown-menu-on-hover';\nimport a11yAddDropdownToggleLabels from './navigation/a11y-add-dropdown-toggle-labels';\nimport a11yDropdownMenuKeyboardNavigation from './navigation/a11y-dropdown-menu-keyboard-navigation';\n\n// Navigation desktop click functions\nimport convertDropdownMenuItems from './navigation/convert-dropdown-menu-items';\nimport closeSubMenuHandler from './navigation/close-sub-menu-handler';\nimport a11yAddDropdownToggleLabelsClick from './navigation/a11y-add-dropdown-toggle-labels-click';\nimport a11yDropdownMenuKeyboardNavigationClick from './navigation/a11y-dropdown-menu-keyboard-navigation-click';\n\nconst navDesktop = () => {\n  const navPrimary = document.querySelector('.nav-primary');\n\n  // If .nav-primary doesn't exist, don't continue\n  if (!navPrimary) {\n    return;\n  }\n\n  // Define globals\n  const menuItems = navPrimary.querySelectorAll('.menu-item');\n\n  // Define focusable elements on sub-menu (.menu-item a, .dropdown button)\n  const focusableElementsforDropdown = document.querySelectorAll(\n    '.menu-item a, .dropdown button, .button-nav',\n  );\n\n  // If main-menu is not found, bail\n  if (!document.getElementById('main-menu')) {\n    return;\n  }\n\n  // Dropdown menus\n  a11yAddDropdownToggleLabels(menuItems);\n  a11yDropdownMenuKeyboardNavigation(menuItems, focusableElementsforDropdown);\n\n  // Dropdown on mouse hover\n  dropdownMenuOnHover(menuItems);\n\n  // Check for submenu overflow\n  checkForSubmenuOverflow(menuItems);\n};\n\nconst navClick = () => {\n  // If main-menu is not found, bail\n  if (!document.getElementById('main-menu')) {\n    return;\n  }\n  // Search for all menu items that have submenus\n  const dropdownMenuItems = document.querySelectorAll('.menu-item-has-children');\n\n  // Convert submenus to clickable elements\n  convertDropdownMenuItems(dropdownMenuItems);\n\n  // Define globals\n  const menuItems = document.querySelectorAll('.menu-item');\n  // Define focusable elements on sub-menu (.menu-item a, .dropdown button)\n  const focusableElementsforDropdown = document.querySelectorAll('.menu-item a, .dropdown button, .button-nav');\n\n  // Dropdown menus\n  a11yAddDropdownToggleLabelsClick(menuItems);\n  a11yDropdownMenuKeyboardNavigationClick(menuItems, focusableElementsforDropdown);\n\n  // Handle different scenarios when menus should be closed\n  closeSubMenuHandler(menuItems);\n};\n\nconst navMobile = () => {\n  // If burger toggle is not found, bail\n  if (!document.getElementById('nav-toggle')) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No nav-toggle found.');\n\n    return;\n  }\n\n  function navToggle(e) {\n    // If clicked with mouse or enter key\n    if (e.type === 'click' || e.keyCode === 13) {\n      // Activate nav\n      document.body.classList.toggle('js-nav-active');\n\n      // Scroll to top when triggering mobile navigation\n      // to ensure no gaps are between header and navigation\n      // Please note, if you use sticky-nav, comment out the next line\n      window.scrollTo(0, 0);\n\n      // Toggle aria-expanded attribute, if it's false, change to true and vice versa\n      if (document.getElementById('nav-toggle').getAttribute('aria-expanded') === 'false') {\n        document.getElementById('nav-toggle').setAttribute('aria-expanded', 'true');\n      } else {\n        document.getElementById('nav-toggle').setAttribute('aria-expanded', 'false');\n      }\n\n      // Toggle aria-label\n      // eslint-disable-next-line camelcase, no-undef\n      if (document.getElementById('nav-toggle').getAttribute('aria-label') === air_light_screenReaderText.expand_toggle) {\n        // eslint-disable-next-line camelcase, no-undef\n        document.getElementById('nav-toggle').setAttribute('aria-label', air_light_screenReaderText.collapse_toggle);\n      } else {\n        // eslint-disable-next-line camelcase, no-undef\n        document.getElementById('nav-toggle').setAttribute('aria-label', air_light_screenReaderText.expand_toggle);\n      }\n\n      // Center vertically the absolute positioned mobile dropdown toggles by setting fixed height\n      calculateDropdownToggleHeight();\n\n      // Focusable elements\n      const navContainer = document.getElementById('nav');\n      const focusableElements = [\n        ...navContainer.querySelectorAll(\n          'a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])',\n        ),\n      ]\n        .filter((el) => !el.hasAttribute('disabled'))\n        .filter((el) => !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length));\n\n      focusableElements.forEach((menuItem) => {\n        menuItem.addEventListener('keydown', a11yFocusTrap);\n      });\n    }\n  }\n\n  // When clicking #nav-toggle, add .js-nav-active body class\n  addMultipleEventListeners(\n    document.getElementById('nav-toggle'),\n    ['click', 'keydown', 'keypress'],\n    navToggle,\n  );\n\n  // Get all dropdown-toggles\n  const dropdownToggles = document.querySelectorAll('.dropdown-toggle');\n\n  // Loop through dropdown-toggles\n  dropdownToggles.forEach((dropdownToggle) => {\n    // When clicking a dropdown-toggle, add .js-dropdown-active class to the parent .menu-item\n    addMultipleEventListeners(\n      dropdownToggle,\n      ['click', 'keydown', 'keypress'],\n      calculateDropdownToggleHeight,\n    );\n  });\n\n  // Calculate mobile nav-toggle position\n  calculateBurgerMenuPosition();\n};\n\n// Sticky navigation\n// eslint-disable-next-line no-unused-vars\nconst navSticky = () => {\n  function initStickyNavStyles() {\n    // Add default styles for sticky navigation as <style>\n    const style = document.createElement('style');\n    style.innerHTML = `\n    .site-header {\n      transition: all 100ms cubic-bezier(.4, 0, .2, 1);\n      overflow: visible;\n      width: 100%;\n      z-index: 100;\n    }\n\n    .site-header.is-fixed {\n      animation-duration: 300ms;\n      animation-iteration-count: 1;\n      animation-name: roll-in;\n      background-color: var(--color-white);\n      border-bottom: 1px solid var(--color-black);\n      left: 0;\n      position: fixed;\n      top: 0;\n    }\n\n    @keyframes roll-in {\n      0% {\n        opacity: 0;\n        top: -100%;\n      }\n\n      100% {\n        opacity: 1;\n        top: 0;\n      }\n    }`;\n    document.head.appendChild(style);\n  }\n\n  function initStickyNav() {\n    // Get --width-max-mobile from CSS\n    const widthMaxMobile = getComputedStyle(\n      document.documentElement,\n    ).getPropertyValue('--width-max-mobile');\n\n    // Let's see if we are on mobile viewport\n    const isMobile = window.matchMedia(\n      `(max-width: ${widthMaxMobile})`,\n    ).matches;\n\n    // If things are not okay, bail\n    if (isMobile) {\n      return;\n    }\n\n    const siteHeader = document.querySelector('.site-header');\n    const headerHeight = getComputedStyle(siteHeader).height.split('px')[0];\n    const scrollValue = window.scrollY;\n\n    if (scrollValue > headerHeight) {\n      siteHeader.classList.add('is-fixed');\n    } else if (scrollValue < headerHeight) {\n      siteHeader.classList.remove('is-fixed');\n    }\n\n    if (window.pageYOffset > headerHeight) {\n      siteHeader.classList.add('is-fixed');\n    }\n  }\n\n  window.addEventListener('scroll', initStickyNav);\n  window.addEventListener('DOMContentLoaded', initStickyNavStyles);\n};\n\n// Export different navigation functions\nexport {\n  navSticky, navDesktop, navClick, navMobile,\n};\n\n// Reinit some things\nwindow.addEventListener('resize', () => {\n  // Center vertically the absolute positioned burger\n  calculateBurgerMenuPosition();\n\n  // Center vertically the absolute positioned mobile dropdown toggles by setting fixed height\n  calculateDropdownToggleHeight();\n\n  // Check for submenu overflow\n  checkForSubmenuOverflow(document.querySelectorAll('.menu-item'));\n});\n","// Event listener helper function\nfunction addMultipleEventListeners(element, events, handler) {\n  events.forEach((e) => element.addEventListener(e, handler));\n}\n\nexport default addMultipleEventListeners;\n","// Calculate burger menu position\nfunction calculateBurgerMenuPosition() {\n  // If nav-toggle, site-header or main-menu not found, bail\n  if (!document.getElementById('nav-toggle') || !document.querySelector('.site-header') || !document.getElementById('menu-items-wrapper')) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No nav-toggle or site-header found.');\n\n    return;\n  }\n\n  // Set viewport\n  const viewportWidth = document.documentElement.clientWidth || document.body.clientWidth;\n\n  // Get --width-max-mobile from CSS\n  const widthMaxMobile = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile'), 10);\n\n  // Get the height of .site-header and #nav-toggle\n  // Calculate the top position of the toggle to be exactly in the center vertically\n  const siteHeaderHeight = document.querySelector('.site-header').offsetHeight;\n\n  // Set navigation position from top if on mobile\n  if (viewportWidth <= widthMaxMobile) {\n    document.getElementById('menu-items-wrapper').style.top = `${siteHeaderHeight}px`;\n    document.getElementById('menu-items-wrapper').style.height = `calc(100vh - ${siteHeaderHeight}px)`;\n\n    // If there is air-notification element(s), calculate top and height of menu-items-wrapper\n    if (document.querySelector('.air-notification')) {\n      // Get air-notification element(s)\n      const airNotifications = document.querySelectorAll('.air-notification');\n\n      // Get the height of air-notification(s)\n      let airNotificationsHeight = 0;\n      airNotifications.forEach((airNotification) => {\n        airNotificationsHeight = airNotification.offsetHeight + airNotificationsHeight;\n      });\n\n      // Set the height and top of menu-items-wrapper\n      document.getElementById('menu-items-wrapper').style.height = `calc(100vh - ${siteHeaderHeight + airNotificationsHeight}px)`;\n      document.getElementById('menu-items-wrapper').style.top = `${siteHeaderHeight + airNotificationsHeight}px`;\n\n      // When air-notification is closed, recalculate the height of menu-items-wrapper\n      airNotifications.forEach((airNotification) => {\n        const button = airNotification.querySelector('button');\n        const currentNotificationHeight = airNotification.offsetHeight;\n        if (button) {\n          button.addEventListener('click', () => {\n            airNotificationsHeight -= currentNotificationHeight;\n            document.getElementById('menu-items-wrapper').style.height = `calc(100vh - ${siteHeaderHeight + airNotificationsHeight}px)`;\n            document.getElementById('menu-items-wrapper').style.top = `${siteHeaderHeight + airNotificationsHeight}px`;\n          });\n        }\n      });\n    }\n  } else {\n    document.getElementById('menu-items-wrapper').style.top = '0';\n    document.getElementById('menu-items-wrapper').style.height = 'auto';\n  }\n}\n\nexport default calculateBurgerMenuPosition;\n","function a11yFocusTrap(e) {\n  // Init focusable elements\n  let focusableElements = [];\n\n  // Define container\n  const container = document.getElementById('nav');\n\n  // Define nav-toggle\n  const navToggle = document.getElementById('nav-toggle');\n\n  // Get --width-max-mobile from CSS\n  const widthMaxMobile = getComputedStyle(\n    document.documentElement,\n  ).getPropertyValue('--width-max-mobile');\n\n  // Let's see if we are on mobile viewport\n  const isMobile = window.matchMedia(`(max-width: ${widthMaxMobile})`).matches;\n\n  // If things are not okay, bail\n  if (!container || !navToggle || !isMobile) {\n    return;\n  }\n\n  // Set focusable elements inside main navigation.\n  focusableElements = [\n    ...container.querySelectorAll(\n      'a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])',\n    ),\n  ]\n    .filter((el) => !el.hasAttribute('disabled'))\n    .filter(\n      (el) => !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length),\n    );\n\n  // Get first and last focusable element\n  const firstFocusableElement = focusableElements[0];\n  const lastFocusableElement = focusableElements[focusableElements.length - 1];\n\n  // On key down on first element, if it's a Shift+Tab, redirect to last element\n  if (firstFocusableElement === e.target && e.code === 'Tab' && e.shiftKey) {\n    e.preventDefault();\n    lastFocusableElement.focus();\n  }\n  // On key down on last element, if it's a Tab, redirect to first element\n  if (lastFocusableElement === e.target && e.code === 'Tab' && !e.shiftKey) {\n    e.preventDefault();\n    firstFocusableElement.focus();\n  }\n}\n\nexport default a11yFocusTrap;\n","// Calculate mobile nav-toggle height\nfunction calculateDropdownToggleHeight() {\n  // If .dropdown-toggle not found, bail\n  if (!document.querySelectorAll('.dropdown-toggle')) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No dropdown-toggles found.');\n\n    return;\n  }\n\n  // Find all .dropdown-toggle elements on mobile\n  const dropdownToggles = document.querySelectorAll('.dropdown-toggle');\n\n  // Loop through dropdown toggles\n  dropdownToggles.forEach((dropdownToggle) => {\n    // Get the height of previous element\n\n    const previousElement = dropdownToggle.previousElementSibling;\n    if (previousElement) {\n      const previousElementHeight = previousElement.offsetHeight;\n      // Set the height of the dropdown toggle\n      // eslint-disable-next-line no-param-reassign\n      dropdownToggle.style.height = `${previousElementHeight}px`;\n    }\n  });\n}\n\nexport default calculateDropdownToggleHeight;\n","// Import required modules\nimport isOutOfViewport from './is-out-of-viewport';\n\n// Check for submenu overflow\nfunction checkForSubmenuOverflow(items) {\n  // If items not found, bail\n  if (!items) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No items for sub-menus found.');\n\n    return;\n  }\n\n  items.forEach((li) => {\n    // Find sub menus\n    const subMenusUnderMenuItem = li.querySelectorAll('.sub-menu');\n\n    // Loop through sub menus\n    subMenusUnderMenuItem.forEach((subMenu) => {\n      // First let's check if submenu exists\n      if (typeof subMenusUnderMenuItem !== 'undefined') {\n        // Check if the sub menu is out of viewport or not\n        const isOut = isOutOfViewport(subMenu);\n\n        // At least one side of the element is out of viewport\n        if (isOut.right) {\n          subMenu.classList.add('is-out-of-viewport');\n        }\n      }\n    });\n  });\n}\n\nexport default checkForSubmenuOverflow;\n","// Check if an element is out of the viewport\n// eslint-disable-next-line func-names\nconst isOutOfViewport = function (elem) {\n  // Get element's bounding\n  const bounding = elem.getBoundingClientRect();\n\n  // Check if it's out of the viewport on each side\n  const out = {};\n  out.top = bounding.top < 0;\n  out.left = bounding.left < 0;\n  out.bottom = bounding.bottom\n    >= (document.documentElement.clientHeight || document.body.clientHeight);\n  out.right = bounding.right\n    >= (document.documentElement.clientWidth || document.body.clientWidth);\n  out.any = out.top || out.left || out.bottom || out.right;\n\n  return out;\n};\n\nexport default isOutOfViewport;\n","// Dropdown menu function\nfunction dropdownMenuOnHover(items) {\n  // Optional timeout\n  const hoverIntentTimeout = 0;\n\n  items.forEach((li) => {\n    // eslint-disable-next-line func-names\n    li.addEventListener('mouseover', function () {\n      // Get --width-max-mobile from CSS\n      const widthMaxMobile = getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile');\n\n      // Let's see if we are on mobile viewport\n      const isMobile = window.matchMedia(`(max-width: ${widthMaxMobile})`).matches;\n\n      // If rules don't apply, bail\n      if (li.classList.contains('removing-hover') || isMobile) {\n        return;\n      }\n\n      // Add hover classes\n      this.classList.add('hover-intent');\n      this.classList.add('hovering');\n      this.parentNode.classList.add('hover-intent');\n      this.parentNode.classList.add('hovering');\n\n      // Remove hovering class after a while\n      setTimeout(() => {\n        this.classList.remove('hovering');\n        this.parentNode.classList.remove('hovering');\n      }, 500);\n\n      document.addEventListener('keydown', (keydownMouseoverEvent) => {\n        // If rules don't apply, bail\n        if (this.classList.contains('removing-hover') || !this.classList.contains('hovering') || !this.parentNode.classList.contains('hovering')) {\n          return;\n        }\n\n        // Close navigation on Escape while hovering the navigation\n        if (keydownMouseoverEvent.key === 'Escape') {\n          li.classList.remove('hover-intent');\n          li.parentNode.classList.remove('hover-intent');\n          li.parentNode.parentNode.classList.remove('hover-intent');\n\n          // Add class removing-hover to prevent the menu from opening again when moving the mouse\n          li.classList.add('removing-hover');\n          li.parentNode.classList.add('removing-hover');\n\n          // Remove removing-hover class after a while to re-initialize the menu\n          setTimeout(() => {\n            this.classList.remove('removing-hover');\n            this.parentNode.classList.remove('removing-hover');\n          }, 500);\n        }\n      });\n\n      // Remove removing-hover class after a while to re-initialize the menu\n      setTimeout(() => {\n        this.classList.remove('removing-hover');\n        this.parentNode.classList.remove('removing-hover');\n      }, 500);\n    });\n\n    // eslint-disable-next-line func-names\n    li.addEventListener('mouseleave', function () {\n      setTimeout(() => {\n        // Remove hover-intent class on mouse leave\n        this.classList.remove('hover-intent');\n        this.parentNode.classList.remove('hover-intent');\n\n        const dropdownToggles = this.querySelectorAll('.dropdown-toggle');\n        dropdownToggles.forEach((dropdownToggle) => {\n          // Set aria-expanded to false for all dropdown-toggle elements\n          dropdownToggle.setAttribute('aria-expanded', 'false');\n\n          if (dropdownToggle.parentNode.querySelector('.dropdown')) {\n            const linkText = dropdownToggle.parentNode.querySelector('.dropdown').textContent;\n\n            // Set aria-label to expand for all dropdown-toggle elements\n            // eslint-disable-next-line camelcase, no-undef\n            dropdownToggle.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n          }\n        });\n      }, hoverIntentTimeout);\n\n      setTimeout(() => {\n        // Remove removing-hover class after a while to re-initialize the menu\n        this.classList.remove('removing-hover');\n        this.parentNode.classList.remove('removing-hover');\n      }, 500);\n    });\n  });\n}\n\nexport default dropdownMenuOnHover;\n","// Add proper link labels for screen readers\nfunction a11yAddDropdownToggleLabels(items) {\n  items.forEach((li) => {\n    // If .dropdown-class does not exist then do nothing\n    if (!li.querySelector('.dropdown')) {\n      return;\n    }\n\n    // Get the dropdown-button\n    const dropdownButton = li.querySelector('.dropdown-toggle');\n\n    // Get the link text that is children of this item\n    const linkText = li.querySelector('.dropdown').innerText;\n\n    // Add the aria-label to the dropdown button\n    // eslint-disable-next-line camelcase, no-undef\n    dropdownButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n  });\n}\n\nexport default a11yAddDropdownToggleLabels;\n","// Import required modules\nimport addMultipleEventListeners from './add-multiple-event-listeners';\n\n// Accessible keyboard navigation for dropdown menus\nfunction a11yDropdownMenuKeyboardNavigation(items, focusableElements) {\n  focusableElements.forEach((item) => {\n    item.addEventListener('keyup', (e) => {\n      // Get this item\n      const thisElement = e.target;\n\n      // Close previous dropdown if this parent contains id main-menu\n      if (\n        thisElement.parentNode.parentNode.id === 'main-menu'\n        || (thisElement.classList.contains('button-nav')\n        && thisElement.parentNode.parentNode.id === 'main-menu')\n      ) {\n        // If we have previous item\n        if (thisElement.parentNode.previousElementSibling) {\n          // Get the previous item\n          const previousItem = thisElement.parentNode.previousElementSibling;\n\n          // Remove toggled-on class from previous item\n          previousItem.classList.remove('toggled-on');\n\n          // Remove hover-intent class from previous item\n          previousItem.classList.remove('hover-intent');\n\n          // If sub-menu found\n          if (previousItem.querySelector('.sub-menu')) {\n            // Get the previous item's dropdown\n            const previousItemDropdown = previousItem.querySelector('.sub-menu');\n\n            // Remove toggled-on class from previous sibling\n            previousItemDropdown.classList.remove('toggled-on');\n\n            // Remove hover-intent class from previous sibling\n            previousItemDropdown.classList.remove('hover-intent');\n\n            // Change toggle button aria-label\n            // eslint-disable-next-line camelcase, no-undef\n            previousItem.querySelector('.dropdown-toggle').setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${previousItem.querySelector('.dropdown-item').innerText}`);\n\n            // Change toggle button aria-expanded\n            previousItem\n              .querySelector('.dropdown-toggle')\n              .setAttribute('aria-expanded', 'false');\n\n            // Toggle toggled-on class on previousItem\n            previousItem\n              .querySelector('.dropdown-toggle')\n              .classList.remove('toggled-on');\n          }\n        }\n      }\n    });\n\n    // NVDA supported keyboard navigation (NVDA and mobile need click event to work)\n    addMultipleEventListeners(item, ['click', 'keydown', 'keypress'], (e) => {\n      // Get this link\n      const thisElement = e.target;\n\n      // Get this menu-item\n      const thisMenuItem = thisElement.parentNode;\n\n      // Define the elements of this dropdown\n      const firstDropdown = thisElement.parentNode.parentNode.parentNode.querySelector('.sub-menu');\n      const thisDropdown = thisElement.nextElementSibling;\n      const dropdownToggleButton = thisElement.parentNode.parentNode.parentNode.querySelector(\n        '.dropdown-toggle',\n      );\n\n      // Remove removing-hover class\n      thisElement.classList.remove('removing-hover');\n      thisMenuItem.parentNode.classList.remove('removing-hover');\n\n      // Open navigation on Enter, e.type click is for NVDA\n      if (e.key === 'Enter' || e.type === 'click') {\n        // If this item is a hyperlink, do nothing. We want to use Enter only with buttons\n        if (thisElement.tagName === 'A') {\n          return;\n        }\n\n        // If link label not found, do nothing\n        if (!thisElement.parentNode.querySelector('.dropdown-item')) {\n          return;\n        }\n\n        // Get the link label of .dropdown link\n        const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n\n        // Toggle toggled-on class\n        thisElement.classList.toggle('toggled-on');\n\n        // If aria-expanded is false, set it to true\n        if (thisElement.getAttribute('aria-expanded') === 'false') {\n          // Set aria-expanded to true\n          thisElement.setAttribute('aria-expanded', 'true');\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.collapse_for} ${linkLabel}`);\n        } else {\n          // Set aria-expanded to false\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n        }\n\n        // Toggle the dropdown\n        if (thisDropdown && !thisDropdown.classList.contains('toggled-on')) {\n          // Add hover-intent class to this menu-item\n          thisMenuItem.classList.add('hover-intent');\n\n          // Add toggled-on class to this dropdown\n          thisDropdown.classList.add('toggled-on');\n        } else {\n          // Remove hover-intent class from this menu-item\n          if (thisMenuItem) {\n            thisMenuItem.classList.remove('hover-intent');\n          }\n\n          // Remove toggled-on class from this dropdown\n          if (thisDropdown) {\n            thisDropdown.classList.remove('toggled-on');\n          }\n        }\n      }\n\n      // Close navigation on Escape\n      if (e.key === 'Escape') {\n        // Close mobile nav if no sub-menu is open\n        if (\n          thisElement.parentNode.parentNode.id === 'main-menu'\n          && !thisElement.parentNode.classList.contains('toggled-on')\n        ) {\n          document.body.classList.remove('js-nav-active');\n\n          // Move focus back to nav-toggle\n          document.getElementById('nav-toggle').focus();\n        }\n\n        // If we're on main level and nav item is not open, do nothing\n        if (\n          thisElement.parentNode.parentNode.id === 'main-menu'\n          && !thisElement.parentNode.classList.contains('hover-intent')\n        ) {\n          return;\n        }\n\n        // Remove toggled-on classes from this dropdown\n        firstDropdown.classList.remove('toggled-on');\n\n        // Remove hover-intent classes from the current menu-item\n        thisMenuItem.classList.remove('hover-intent');\n\n        // Hide menu if we're on second level\n        thisMenuItem.parentNode.parentNode.classList.remove('hover-intent');\n\n        // Set aria expanded attribute to false\n        dropdownToggleButton.setAttribute('aria-expanded', 'false');\n\n        // Remove toggled-on\n        dropdownToggleButton.classList.remove('toggled-on');\n\n        // Get the link label of dropdown link\n        const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n\n        // Set aria label attribute\n        // eslint-disable-next-line camelcase, no-undef\n        dropdownToggleButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n\n        // If we're on button, add aria-expanded to false\n        if (thisElement.classList.contains('dropdown-toggle')) {\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n        }\n\n        // Move focus back to previous .dropdown-toggle, but only if we're not on main level\n        if (thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Delay toggling for NVDA for 100 ms\n          setTimeout(() => {\n            dropdownToggleButton.focus();\n          }, 100);\n        }\n      }\n\n      // If no arrow keys used, do not continue\n      if (\n        e.key !== 'ArrowUp'\n        && e.key !== 'ArrowDown'\n        && e.key !== 'ArrowLeft'\n        && e.key !== 'ArrowRight'\n      ) {\n        return;\n      }\n\n      // Arrow keys\n      switch (e.code) {\n      // ArrowUp\n      case 'ArrowUp':\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If we're on the sub-menu, move up\n        if (\n          thisElement.parentNode.parentNode.previousElementSibling\n            && thisElement.parentNode.parentNode.previousElementSibling.classList.contains(\n              'dropdown-toggle',\n            )\n        ) {\n          // Focus to the previous link\n          thisElement.parentNode.parentNode.previousElementSibling.focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, close the dropdown\n        if (\n          thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'true'\n        ) {\n          // Remove hover-intent class from this menu-item\n          thisMenuItem.classList.remove('hover-intent');\n\n          // Remove toggled-on class from this dropdown\n          thisDropdown.classList.remove('toggled-on');\n\n          // Set aria-expanded attribute to false\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Get the link label of .dropdown link\n          const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n\n          // Move focus back to previous .dropdown-toggle\n          dropdownToggleButton.focus();\n        }\n\n        // If this is a correct element, focus to the previous link\n        if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n          // If there is no previous items, bail\n          if (!thisElement.parentNode.previousElementSibling) {\n            return;\n          }\n\n          // Get the previous link\n          const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          const previousToggle = thisElement.parentNode.previousElementSibling.querySelector(\n            '.dropdown-toggle',\n          );\n\n          // If previous element is .dropdown-toggle element, focus to it\n          if (\n            previousToggle\n              && !thisElement.querySelector('.dropdown-toggle')\n          ) {\n            previousToggle.focus();\n          } else {\n            // If previous element is a link, focus to it\n            previousLink.focus();\n          }\n        }\n\n        break;\n\n        // ArrowDown\n      case 'ArrowDown':\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If we're on the sub-menu, move down\n        if (\n          thisElement.parentNode.parentNode.nextElementSibling\n            && thisElement.parentNode.parentNode.nextElementSibling.classList.contains(\n              'dropdown-toggle',\n            )\n        ) {\n          // Focus to the next link\n          thisElement.parentNode.parentNode.nextElementSibling.focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, move down\n        if (\n          thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'true'\n        ) {\n          // Focus to the next link\n          thisElement.parentNode\n            .querySelector('.sub-menu')\n            .querySelector('li:first-child')\n            .querySelector('a')\n            .focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n        // (if we are not inside sub-menu)\n        if (\n          thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'false'\n            && !thisElement.parentNode.parentNode.classList.contains('sub-menu')\n        ) {\n          // Open sub-menu\n          thisElement.click();\n\n          // Focus to the next link under sub-menu\n          thisElement.parentNode\n            .querySelector('.sub-menu')\n            .querySelector('li:first-child')\n            .querySelector('a')\n            .focus();\n\n          // Don't do anything else\n          return;\n        }\n\n        // If we are in fact in sub menu, move to next link\n        if (\n          thisElement.parentNode.parentNode.classList.contains('sub-menu')\n        ) {\n          // Focus to the next link\n          thisElement.parentNode.nextElementSibling\n            .querySelector('a')\n            .focus();\n        }\n\n        // If this is a correct element, focus to the next link\n        if (\n          (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON')\n            && !thisElement.classList.contains('dropdown-toggle')\n        ) {\n          // If there is no next items, bail\n          if (!thisElement.parentNode.nextElementSibling) {\n            return;\n          }\n\n          // Get the next link\n          const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          let nextToggle = thisElement.parentNode.nextElementSibling.querySelector(\n            '.dropdown-toggle',\n          );\n\n          // If this has class .dropdown-item, jump to the next .dropdown-toggle\n          if (thisElement.classList.contains('dropdown-item')) {\n            // If there is a toggle\n            if (thisElement.nextElementSibling) {\n              // Get the dropdown-toggle element\n              nextToggle = thisElement.nextElementSibling;\n\n              // If next element is .dropdown-toggle element, focus to it\n              if (nextToggle) {\n                nextToggle.focus();\n              }\n            }\n          }\n\n          // If next element is .dropdown-toggle element, focus to it\n          if (nextToggle && !thisElement.querySelector('.dropdown-toggle')) {\n            nextToggle.focus();\n          } else {\n            // If next element is a link, focus to it\n            nextLink.focus();\n          }\n        }\n\n        break;\n\n        // ArrowLeft\n      case 'ArrowLeft':\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If we are on the first link, move to the dropdown-toggle and close menu\n        if (\n          thisElement.parentNode.previousElementSibling === null\n            && thisElement.parentNode.parentNode.id !== 'main-menu'\n        ) {\n          // Focus to the previous link\n          thisElement.parentNode.parentNode.parentNode\n            .querySelector('.dropdown-toggle')\n            .focus();\n\n          // Close the dropdown\n          thisElement.parentNode.parentNode.parentNode\n            .querySelector('.dropdown-toggle')\n            .click();\n\n          // Don't do anything else\n          return;\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, move left\n        if (\n          thisElement.parentNode.previousElementSibling\n            && thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'true'\n            && thisElement.parentNode.parentNode.id !== 'main-menu'\n        ) {\n          // Focus to the previous link\n          thisElement.parentNode.previousElementSibling\n            .querySelector('a')\n            .focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is false, close the dropdown\n        if (\n          thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'false'\n            && thisElement.parentNode.parentNode.id !== 'main-menu'\n        ) {\n          // Remove hover-intent class from this menu-item\n          thisMenuItem.classList.remove('hover-intent');\n\n          // Remove toggled-on class from this dropdown\n          thisDropdown.classList.remove('toggled-on');\n\n          // Set aria-expanded attribute to false\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Get the link label of .dropdown link\n          const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n\n          // Move focus back to previous .dropdown-toggle\n          dropdownToggleButton.focus();\n        }\n\n        // If this is a correct element, focus to the previous link\n        if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n          // If this is a .dropdown-toggle button and aria-expanded is false,\n          // move to the link directly before it\n          if (\n            thisElement.previousElementSibling\n              && thisElement.classList.contains('dropdown-toggle')\n              && thisElement.getAttribute('aria-expanded') === 'false'\n          ) {\n            // Focus to the previous link\n            thisElement.previousElementSibling.focus();\n\n            // Don't do anything else\n            return;\n          }\n\n          // If there is no previous items, bail\n          if (!thisElement.parentNode.previousElementSibling) {\n            return;\n          }\n\n          // Get the previous link\n          const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          const previousToggle = thisElement.parentNode.previousElementSibling.querySelector(\n            '.dropdown-toggle',\n          );\n\n          // If previous element is .dropdown-toggle element, focus to it\n          if (previousToggle) {\n            previousToggle.focus();\n          } else {\n            // If previous element is a link, focus to it\n            previousLink.focus();\n          }\n        }\n\n        break;\n\n        // ArrowRight\n      case 'ArrowRight':\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, move right\n        if (\n          thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'true'\n            && thisElement.parentNode.parentNode.id !== 'main-menu'\n        ) {\n          // Focus to the next link\n          thisElement.parentNode\n            .querySelector('.sub-menu')\n            .querySelector('li:first-child')\n            .querySelector('a')\n            .focus();\n        }\n\n        // If this has class .dropdown-item, jump to the next .dropdown-toggle\n        if (thisElement.nextElementSibling) {\n          thisElement.nextElementSibling.focus();\n\n          // Disable other actions if this is a .dropdown-item\n          if (thisElement.classList.contains('dropdown-item')) {\n            return;\n          }\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n        if (\n          thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'false'\n            && thisElement.parentNode.parentNode.id !== 'main-menu'\n        ) {\n          // Open sub-menu\n          thisElement.click();\n\n          // Do nothing else\n          return;\n        }\n\n        // If this is a dropdown-toggle button and aria-expanded is true, move right\n        if (\n          thisElement.classList.contains('dropdown-toggle')\n            && thisElement.getAttribute('aria-expanded') === 'true'\n            && thisElement.parentNode.parentNode.id !== 'main-menu'\n        ) {\n          // Focus to the next link\n          thisElement.parentNode\n            .querySelector('.sub-menu')\n            .querySelector('li:first-child')\n            .querySelector('a')\n            .focus();\n\n          // Don't do anything else\n          return;\n        }\n\n        // If this is a correct element, focus to the previous link\n        if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n          // If there is no next items, bail\n          if (!thisElement.parentNode.nextElementSibling) {\n            return;\n          }\n\n          // Get the next link\n          const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          const nextToggle = thisElement.parentNode.nextElementSibling.querySelector(\n            '.dropdown-toggle',\n          );\n\n          // If next element is .dropdown-toggle element, focus to it\n          if (nextToggle) {\n            nextToggle.focus();\n          } else {\n            // If next element is a link, focus to it\n            nextLink.focus();\n          }\n        }\n\n        break;\n\n      default:\n        break;\n      }\n    });\n  });\n}\n\nexport default a11yDropdownMenuKeyboardNavigation;\n","function convertDropdownMenuItems(items) {\n  items.forEach((li) => {\n  // Get dropdown toggle button\n    const dropdownToggle = li.querySelector('.dropdown-toggle');\n\n    // Get dropdown menu item data\n    const menuItemTitle = li.querySelector('a > span').innerHTML;\n    const menuItemLinkElement = li.querySelector('a');\n    const menuItemLink = menuItemLinkElement.href;\n\n    // Remove dropdown menu item link\n    menuItemLinkElement.remove();\n\n    // Add dropdown menu item title to dropdown toggle button\n    dropdownToggle.innerHTML = menuItemTitle;\n\n    // Create new nav element\n    const navElement = document.createElement('li');\n    navElement.classList.add('menu-item');\n\n    // Add dropdown menu item data to nav element\n    // Create elements\n    const navElementLink = document.createElement('a');\n    const navElementLinkSpan = document.createElement('span');\n\n    // Add data to elements\n    // Span\n    navElementLinkSpan.innerHTML = menuItemTitle;\n    navElementLinkSpan.setAttribute('itemprop', 'name');\n    // Link\n    navElementLink.setAttribute('itemprop', 'url');\n    navElementLink.href = menuItemLink;\n    navElementLink.classList.add('dropdown-item');\n\n    // Append elements\n    navElementLink.appendChild(navElementLinkSpan);\n    navElement.appendChild(navElementLink);\n\n    // Get the sub menu first child and add the new nav element before it\n    const subMenuFirstChild = li.querySelector('.sub-menu > li');\n    const subMenu = li.querySelector('.sub-menu');\n    subMenu.insertBefore(navElement, subMenuFirstChild);\n  });\n}\n\nexport default convertDropdownMenuItems;\n","import closeSubMenu from './close-sub-menu';\n\nfunction closeSubMenuHandler(items) {\n  // Close open dropdowns when clicking outside of the menu\n  const page = document.getElementById('page');\n  page.addEventListener('click', (e) => {\n    // If the click is inside the menu, bail\n    if (e.target.closest('.menu-items')) {\n      return;\n    }\n\n    items.forEach((li) => {\n      closeSubMenu(li);\n    });\n  });\n\n  // Close open dropdown when pressing escape\n  items.forEach((li) => {\n    li.addEventListener('keydown', (keydownMouseoverEvent) => {\n      if (keydownMouseoverEvent.key === 'Escape') {\n        closeSubMenu(li);\n      }\n    });\n  });\n\n  // Close other dropdowns when opening a new one\n  items.forEach((li) => {\n    // Bail if no dropdown\n    if (!li.classList.contains('menu-item-has-children')) {\n      return;\n    }\n\n    const dropdownToggle = li.querySelector('.dropdown-toggle');\n    const sameLevelDropdowns = li.parentNode.querySelectorAll(':scope > .menu-item-has-children');\n\n    // Add event listener to dropdown toggle\n    dropdownToggle.addEventListener('click', () => {\n      // We want to close other dropdowns only when a new one is opened\n      if (!dropdownToggle.classList.contains('toggled-on')) {\n        return;\n      }\n\n      sameLevelDropdowns.forEach((sameLevelDropdown) => {\n        if (sameLevelDropdown !== li) {\n          // Close all other sub level dropdowns\n          sameLevelDropdown.querySelectorAll('.menu-item').forEach((subLi) => {\n            closeSubMenu(subLi);\n          });\n          // Close other same level dropdowns\n          closeSubMenu(sameLevelDropdown);\n        }\n      });\n    });\n  });\n}\nexport default closeSubMenuHandler;\n","function closeSubMenu(li) {\n  // If menu item is not a dropdown then do nothing\n  if (!li.querySelector('.dropdown-toggle') && !li.querySelector('.sub-menu')) {\n    return;\n  }\n\n  // Get the dropdown-button\n  const dropdownButton = li.querySelector('.dropdown-toggle');\n\n  // Get the submenu\n  const subMenu = li.querySelector('.sub-menu');\n\n  // If the dropdown-menu is not open, bail\n  if (!subMenu.classList.contains('toggled-on')) {\n    return;\n  }\n\n  // Remove the open class from the dropdown-menu\n  subMenu.classList.remove('toggled-on');\n\n  // Remove the open class from the dropdown-button\n  dropdownButton.classList.remove('toggled-on');\n\n  // Remove the aria-expanded attribute from the dropdown-button\n  dropdownButton.setAttribute('aria-expanded', 'false');\n\n  // Get the link text that is children of this item\n  const linkText = dropdownButton.innerHTML;\n\n  // Add the aria-label to the dropdown button\n  // eslint-disable-next-line camelcase, no-undef\n  dropdownButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n}\n\nexport default closeSubMenu;\n","// Add proper link labels for screen readers\nfunction a11yAddDropdownToggleLabelsClick(items) {\n  items.forEach((li) => {\n    // If .dropdown-toggle does not exist then do nothing\n    if (!li.querySelector('.dropdown-toggle')) {\n      return;\n    }\n\n    // Add helper class to dropdown-toggle\n    li.querySelector('.dropdown-toggle').classList.add('menu-item-clickable');\n\n    // Remove .dropdown-toggle class\n    li.querySelector('.dropdown-toggle').classList.remove('dropdown-toggle');\n\n    // Get the dropdown-button\n    const dropdownButton = li.querySelector('.menu-item-clickable');\n\n    // Get the link text that is children of this item\n    const linkText = dropdownButton.innerHTML;\n    // Add the aria-label to the dropdown button\n    // eslint-disable-next-line camelcase, no-undef\n    dropdownButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkText}`);\n  });\n}\n\nexport default a11yAddDropdownToggleLabelsClick;\n","// Import required modules\nimport addMultipleEventListeners from './add-multiple-event-listeners';\n\n// Accessible keyboard navigation for dropdown menus\nfunction a11yDropdownMenuKeyboardNavigationClick(items, focusableElements) {\n  focusableElements.forEach((item) => {\n    item.addEventListener('keyup', (e) => {\n      // Get this item\n      const thisElement = e.target;\n\n      // Get this menu-item\n      // eslint-disable-next-line no-unused-vars\n      const thisMenuItem = thisElement.parentNode;\n\n      // Close previous dropdown if this parent contains id main-menu\n      if (thisElement.parentNode.parentNode.id === 'main-menu' || (thisElement.classList.contains('button-nav') && thisElement.parentNode.parentNode.id === 'main-menu')) {\n        // If we have previous item\n        if (thisElement.parentNode.previousElementSibling) {\n          // Get the previous item\n          const previousItem = thisElement.parentNode.previousElementSibling;\n          // Get main level sub-menu\n          const mainLevelSubMenu = previousItem.querySelector('.sub-menu');\n\n          // If sub-menu found, close nested sub-menus first\n          if (mainLevelSubMenu && mainLevelSubMenu.querySelectorAll('.menu-item-has-children')) {\n            mainLevelSubMenu.querySelectorAll('.menu-item-has-children').forEach((subMenu) => {\n              // Get the previous item's dropdown\n              const previousItemDropdownToggle = subMenu.querySelector('.dropdown-toggle');\n              const previousItemDropdown = subMenu.querySelector('.sub-menu');\n\n              // Remove toggled-on class from previous item button\n              previousItemDropdownToggle.classList.remove('toggled-on');\n\n              // Remove toggled-on class from previous sibling\n              previousItemDropdown.classList.remove('toggled-on');\n\n              // Change toggle button aria-label\n              // eslint-disable-next-line camelcase, no-undef\n              previousItemDropdownToggle.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${previousItemDropdownToggle.innerText}`);\n\n              // Change toggle button aria-expanded\n              previousItemDropdownToggle.setAttribute('aria-expanded', 'false');\n            });\n          }\n\n          // Close main level sub-menu\n          const previousItemDropdownToggle = previousItem.querySelector('.dropdown-toggle');\n          const previousItemDropdown = previousItem.querySelector('.sub-menu');\n\n          if (previousItemDropdownToggle && previousItemDropdown) {\n            // Remove toggled-on class from previous item button\n            previousItemDropdownToggle.classList.remove('toggled-on');\n\n            // Remove toggled-on class from previous sibling\n            previousItemDropdown.classList.remove('toggled-on');\n\n            // Change toggle button aria-label\n            // eslint-disable-next-line camelcase, no-undef\n            previousItemDropdownToggle.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${previousItemDropdownToggle.innerText}`);\n\n            // Change toggle button aria-expanded\n            previousItemDropdownToggle.setAttribute('aria-expanded', 'false');\n          }\n        }\n      }\n    });\n\n    // NVDA supported keyboard navigation (NVDA and mobile need click event to work)\n    addMultipleEventListeners(item, ['click', 'keydown', 'keypress'], (e) => {\n      // Get this link or button\n      const thisElement = e.target;\n\n      // Define the elements of this dropdown\n      const firstDropdown = thisElement.parentNode.parentNode.parentNode.querySelector('.sub-menu');\n      const thisDropdown = thisElement.nextElementSibling;\n      const dropdownToggleButton = thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle');\n\n      // Open navigation on Enter, e.type click is for NVDA\n      if (e.key === 'Enter' || e.type === 'click') {\n        // If this item is a hyperlink, do nothing. We want to use Enter only with buttons\n        if (thisElement.tagName === 'A') {\n          return;\n        }\n\n        // Get the text of button\n        const linkLabel = thisElement.innerText;\n\n        // Toggle toggled-on class\n        thisElement.classList.toggle('toggled-on');\n\n        // If aria-expanded is false, set it to true\n        if (thisElement.getAttribute('aria-expanded') === 'false') {\n          // Set aria-expanded to true\n          thisElement.setAttribute('aria-expanded', 'true');\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.collapse_for} ${linkLabel}`);\n        } else {\n          // Set aria-expanded to false\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n        }\n\n        // Toggle the dropdown\n        if (thisDropdown && !thisDropdown.classList.contains('toggled-on')) {\n          // Add toggled-on class to this dropdown\n          thisDropdown.classList.add('toggled-on');\n        } else {\n          // Remove toggled-on class from this dropdown\n          // eslint-disable-next-line no-lonely-if\n          if (thisDropdown) {\n            thisDropdown.classList.remove('toggled-on');\n          }\n        }\n      }\n\n      // Close navigation on Escape\n      if (e.key === 'Escape') {\n        // Close mobile nav if no sub-menu is open\n        if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) {\n          document.body.classList.remove('js-nav-active');\n\n          // Move focus back to nav-toggle\n          document.getElementById('nav-toggle').focus();\n        }\n\n        // If we're on main level and nav item is not open, do nothing\n        if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) {\n          return;\n        }\n\n        // Remove toggled-on classes from this dropdown\n        firstDropdown.classList.remove('toggled-on');\n\n        // Set aria expanded attribute to false\n        dropdownToggleButton.setAttribute('aria-expanded', 'false');\n\n        // Remove toggled-on\n        dropdownToggleButton.classList.remove('toggled-on');\n\n        // Get the link label of dropdown link\n        const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n\n        // Set aria label attribute\n        // eslint-disable-next-line camelcase, no-undef\n        dropdownToggleButton.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n\n        // If we're on button, add aria-expanded to false\n        if (thisElement.classList.contains('dropdown-toggle')) {\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n        }\n\n        // Move focus back to previous .dropdown-toggle, but only if we're not on main level\n        if (thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Delay toggling for NVDA for 100 ms\n          setTimeout(() => {\n            dropdownToggleButton.focus();\n          }, 100);\n        }\n      }\n\n      // If no arrow keys used, do not continue\n      if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') {\n        return;\n      }\n\n      // Arrow keys\n      switch (e.code) {\n      // ArrowUp\n      case 'ArrowUp':\n\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If we're on the sub-menu, move up\n        if (thisElement.parentNode.parentNode.previousElementSibling && thisElement.parentNode.parentNode.previousElementSibling.classList.contains('dropdown-toggle')) {\n          // Focus to the previous link\n          thisElement.parentNode.parentNode.previousElementSibling.focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, close the dropdown\n        if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n          // Remove toggled-on class from this dropdown\n          thisDropdown.classList.remove('toggled-on');\n          thisElement.classList.remove('toggled-on');\n\n          // Set aria-expanded attribute to false\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Get the link label of .dropdown link\n          const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n\n          // Move focus back to previous .dropdown-toggle\n          dropdownToggleButton.focus();\n        }\n\n        // If this is a correct element, focus to the previous link\n        if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n          // If there is no previous items, bail\n          if (!thisElement.parentNode.previousElementSibling) {\n            return;\n          }\n\n          // Get the previous link\n          const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          const previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle');\n\n          // If previous element is .dropdown-toggle element, focus to it\n          if (previousToggle && !thisElement.querySelector('.dropdown-toggle')) {\n            previousToggle.focus();\n          } else {\n            // If previous element is a link, focus to it\n            previousLink.focus();\n          }\n        }\n\n        break;\n\n      // ArrowDown\n      case 'ArrowDown':\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If we're on the sub-menu, move down\n        if (thisElement.parentNode.parentNode.nextElementSibling && thisElement.parentNode.parentNode.nextElementSibling.classList.contains('dropdown-toggle')) {\n          // Focus to the next link\n          thisElement.parentNode.parentNode.nextElementSibling.focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, move down\n        if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n          // Focus to the next link\n          thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n        // (if we are not inside sub-menu)\n        if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && !thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n          // Open sub-menu\n          thisElement.click();\n\n          // Focus to the next link under sub-menu\n          thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n\n          // Don't do anything else\n          return;\n        }\n\n        // If we are in fact in sub menu, move to next link\n        if (thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n          // Focus to the next link or .dropdown-toggle\n          // Generally focus the next link\n          if (thisElement.parentNode.nextElementSibling.querySelector(':scope > a')) {\n            thisElement.parentNode.nextElementSibling.querySelector(':scope > a').focus();\n          } else {\n            // If there is no next link, focus to the next .dropdown-toggle\n            thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle').focus();\n          }\n        }\n\n        // If this is a correct element, focus to the next link\n        if ((thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') && !thisElement.classList.contains('dropdown-toggle')) {\n          // If there is no next items, bail\n          if (!thisElement.parentNode.nextElementSibling) {\n            return;\n          }\n\n          // Get the next link\n          const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          let nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle');\n\n          // If this has class .dropdown-item, jump to the next .dropdown-toggle\n          if (thisElement.classList.contains('dropdown-item')) {\n          // If there is a toggle\n            if (thisElement.nextElementSibling) {\n            // Get the dropdown-toggle element\n              nextToggle = thisElement.nextElementSibling;\n\n              // If next element is .dropdown-toggle element, focus to it\n              if (nextToggle) {\n                nextToggle.focus();\n              }\n            }\n          }\n\n          // If next element is .dropdown-toggle element, focus to it\n          if (nextToggle && !thisElement.querySelector('.dropdown-toggle')) {\n            nextToggle.focus();\n          } else {\n            // If next element is a link, focus to it\n            nextLink.focus();\n          }\n        }\n\n        break;\n\n        // ArrowLeft\n      case 'ArrowLeft':\n\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If we are on the first link, move to the dropdown-toggle and close menu\n        if (thisElement.parentNode.previousElementSibling === null && thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Focus to the previous link\n          thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').focus();\n\n          // Close the dropdown\n          thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').click();\n\n          // Don't do anything else\n          return;\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, move left\n        if (thisElement.parentNode.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Focus to the previous link\n          thisElement.parentNode.previousElementSibling.querySelector('a').focus();\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is false, close the dropdown\n        if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Remove toggled-on class from this dropdown\n          thisDropdown.classList.remove('toggled-on');\n\n          // Set aria-expanded attribute to false\n          thisElement.setAttribute('aria-expanded', 'false');\n\n          // Get the link label of .dropdown link\n          const linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText;\n\n          // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n          thisElement.setAttribute('aria-label', `${air_light_screenReaderText.expand_for} ${linkLabel}`);\n\n          // Move focus back to previous .dropdown-toggle\n          dropdownToggleButton.focus();\n        }\n\n        // If this is a correct element, focus to the previous link\n        if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n          // If this is a .dropdown-toggle button and aria-expanded is false,\n          // move to the link directly before it\n          if (thisElement.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false') {\n            // Focus to the previous link\n            thisElement.previousElementSibling.focus();\n\n            // Don't do anything else\n            return;\n          }\n\n          // If there is no previous items, bail\n          if (!thisElement.parentNode.previousElementSibling) {\n            return;\n          }\n\n          // Get the previous link\n          const previousLink = thisElement.parentNode.previousElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          const previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle');\n\n          // If previous element is .dropdown-toggle element, focus to it\n          if (previousToggle) {\n            previousToggle.focus();\n          } else {\n            // If previous element is a link, focus to it\n            previousLink.focus();\n          }\n        }\n\n        break;\n\n        // ArrowRight\n      case 'ArrowRight':\n\n        // Stop propagation\n        e.stopPropagation();\n\n        // Stop scrolling\n        e.preventDefault();\n\n        // If this is a .dropdown-toggle button and aria-expanded is true, move right\n        if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Focus to the next link\n          thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n        }\n\n        // If this has class .dropdown-item, jump to the next .dropdown-toggle\n        if (thisElement.nextElementSibling) {\n          thisElement.nextElementSibling.focus();\n\n          // Disable other actions if this is a .dropdown-item\n          if (thisElement.classList.contains('dropdown-item')) {\n            return;\n          }\n        }\n\n        // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n        if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Open sub-menu\n          thisElement.click();\n\n          // Do nothing else\n          return;\n        }\n\n        // If this is a dropdown-toggle button and aria-expanded is true, move right\n        if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Focus to the next link\n          thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n\n          // Don't do anything else\n          return;\n        }\n\n        // If this is a correct element, focus to the previous link\n        if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n          // If there is no next items, bail\n          if (!thisElement.parentNode.nextElementSibling) {\n            return;\n          }\n\n          // Get the next link\n          const nextLink = thisElement.parentNode.nextElementSibling.querySelector('a');\n\n          // Get .dropdown-toggle element\n          const nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle');\n\n          // If next element is .dropdown-toggle element, focus to it\n          if (nextToggle) {\n            nextToggle.focus();\n          } else {\n            // If next element is a link, focus to it\n            nextLink.focus();\n          }\n        }\n\n        break;\n\n      default:\n        break;\n      }\n    });\n  });\n}\n\nexport default a11yDropdownMenuKeyboardNavigationClick;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$550bfe2de4deb792$export$2e2bcd8739ae039","stringKey","window","air_light_screenReaderText","console","error","$99ac37db4027a3b8$export$967d794570dbbeff","link","children","length","childImgs","filter","child","tagName","toLowerCase","altTexts","alt","map","join","$eead75805f11b57e$exports","defaults","tolerance","duration","easing","container","callback","easeOutQuart","t","b","c","d","mergeObject","obj1","obj2","obj3","Object","keys","forEach","propertyName","countScrollTop","HTMLElement","scrollTop","pageYOffset","MoveTo","options","arguments","undefined","easeFunctions","prototype","registerTrigger","dom","_this","domOptions","href","getAttribute","target","document","getElementById","substring","body","key","value","concat","val","replace","$1","isNaN","parseInt","listener","e","preventDefault","move","addEventListener","removeEventListener","lastYOffset","_this2","distance","getBoundingClientRect","top","from","startTime","requestAnimationFrame","loop","currentTime","currentYOffset","timeElapsed","scroll","addEaseFunction","name","fn","$e61912f31b7169e2$export$2e2bcd8739ae039","element","events","handler","$97724681587b67ff$export$2e2bcd8739ae039","querySelector","log","viewportWidth","documentElement","clientWidth","widthMaxMobile","getComputedStyle","getPropertyValue","siteHeaderHeight","offsetHeight","style","height","airNotifications","querySelectorAll","airNotificationsHeight","airNotification","button","currentNotificationHeight","$8396852b9d810f79$export$2e2bcd8739ae039","focusableElements","navToggle","isMobile","matchMedia","matches","firstFocusableElement","el","hasAttribute","offsetWidth","getClientRects","lastFocusableElement","code","shiftKey","focus","$8acd1c8dc1ad6dc5$export$2e2bcd8739ae039","dropdownToggles","dropdownToggle","previousElement","previousElementSibling","previousElementHeight","$82ac21aceba2c5d7$export$2e2bcd8739ae039","elem","bounding","out","left","bottom","clientHeight","right","any","$81a31256e9729810$export$2e2bcd8739ae039","items","li","subMenusUnderMenuItem","subMenu","isOut","classList","add","$de6955212554dcbb$export$2e2bcd8739ae039","contains","parentNode","setTimeout","remove","keydownMouseoverEvent","setAttribute","linkText","textContent","expand_for","$0a7c106768bacca4$export$2e2bcd8739ae039","dropdownButton","innerText","$9783fac5bc95fd72$export$2e2bcd8739ae039","item","thisElement","id","previousItem","previousItemDropdown","thisMenuItem","firstDropdown","thisDropdown","nextElementSibling","dropdownToggleButton","type","linkLabel","toggle","collapse_for","stopPropagation","previousLink","previousToggle","click","nextLink","nextToggle","localDomains","moveTo","ease","easeInQuad","easeOutQuad","triggers","Array","trigger","targetId","hash","event","html","menu","history","pushState","location","moveToTop","topButton","focusVisible","preventScroll","scrolled","scrollAmount","host","air_light_externalLinkDomains","externalLinks","$99ac37db4027a3b8$var$isLinkExternal","linkUrl","exceptions","some","exception","compare","RegExp","test","URL","domain","externalLink","childElementCount","trim","ariaLabel","classExceptions","className","insertAdjacentHTML","links","a11ySkipLinkTarget","a11ySkipLink","urlParams","URLSearchParams","search","has","searchField","navPrimary","menuItems","focusableElementsforDropdown","keyCode","scrollTo","expand_toggle","collapse_toggle","navContainer","menuItem","cName","_a","_b","frames","i","frame","hasClass","split","indexOf","width","padding","heightNumber","div","createElement","divStyles","position","paddingTop","frameStyle","insertBefore","removeChild","appendChild"],"version":3,"file":"front-end.js.map"}